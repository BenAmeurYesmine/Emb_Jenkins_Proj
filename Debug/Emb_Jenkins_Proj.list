
Emb_Jenkins_Proj.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001ab4  08000298  08000298  00010298  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000010  08001d4c  08001d4c  00011d4c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  08001d5c  08001d5c  00011d5c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  08001d60  08001d60  00011d60  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000010  24000000  08001d64  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          00000034  24000010  08001d74  00020010  2**2
                  ALLOC
  7 ._user_heap_stack 00000604  24000044  08001d74  00020044  2**0
                  ALLOC
  8 .ARM.attributes 0000002e  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
  9 .debug_info   0000d0aa  00000000  00000000  0002003e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .debug_abbrev 000019c1  00000000  00000000  0002d0e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_aranges 00000630  00000000  00000000  0002eab0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_ranges 00000598  00000000  00000000  0002f0e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_macro  00032792  00000000  00000000  0002f678  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_line   00006821  00000000  00000000  00061e0a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_str    0013fa36  00000000  00000000  0006862b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .comment      00000053  00000000  00000000  001a8061  2**0
                  CONTENTS, READONLY
 17 .debug_frame  00001744  00000000  00000000  001a80b4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000298 <__do_global_dtors_aux>:
 8000298:	b510      	push	{r4, lr}
 800029a:	4c05      	ldr	r4, [pc, #20]	; (80002b0 <__do_global_dtors_aux+0x18>)
 800029c:	7823      	ldrb	r3, [r4, #0]
 800029e:	b933      	cbnz	r3, 80002ae <__do_global_dtors_aux+0x16>
 80002a0:	4b04      	ldr	r3, [pc, #16]	; (80002b4 <__do_global_dtors_aux+0x1c>)
 80002a2:	b113      	cbz	r3, 80002aa <__do_global_dtors_aux+0x12>
 80002a4:	4804      	ldr	r0, [pc, #16]	; (80002b8 <__do_global_dtors_aux+0x20>)
 80002a6:	f3af 8000 	nop.w
 80002aa:	2301      	movs	r3, #1
 80002ac:	7023      	strb	r3, [r4, #0]
 80002ae:	bd10      	pop	{r4, pc}
 80002b0:	24000010 	.word	0x24000010
 80002b4:	00000000 	.word	0x00000000
 80002b8:	08001d34 	.word	0x08001d34

080002bc <frame_dummy>:
 80002bc:	b508      	push	{r3, lr}
 80002be:	4b03      	ldr	r3, [pc, #12]	; (80002cc <frame_dummy+0x10>)
 80002c0:	b11b      	cbz	r3, 80002ca <frame_dummy+0xe>
 80002c2:	4903      	ldr	r1, [pc, #12]	; (80002d0 <frame_dummy+0x14>)
 80002c4:	4803      	ldr	r0, [pc, #12]	; (80002d4 <frame_dummy+0x18>)
 80002c6:	f3af 8000 	nop.w
 80002ca:	bd08      	pop	{r3, pc}
 80002cc:	00000000 	.word	0x00000000
 80002d0:	24000014 	.word	0x24000014
 80002d4:	08001d34 	.word	0x08001d34

080002d8 <_initTestTab>:
static void SystemClock_Config(void);
static void EXTI15_10_IRQHandler_Config(void);
static void Error_Handler(void);
/* Private functions ---------------------------------------------------------*/
static void _initTestTab(uint8_t * tab,uint8_t size)
{
 80002d8:	b480      	push	{r7}
 80002da:	b085      	sub	sp, #20
 80002dc:	af00      	add	r7, sp, #0
 80002de:	6078      	str	r0, [r7, #4]
 80002e0:	460b      	mov	r3, r1
 80002e2:	70fb      	strb	r3, [r7, #3]
	for(uint32_t ctr=0;ctr<size;ctr++)
 80002e4:	2300      	movs	r3, #0
 80002e6:	60fb      	str	r3, [r7, #12]
 80002e8:	e007      	b.n	80002fa <_initTestTab+0x22>
	{
		_testResTab[ctr]=TEST_NOT_SUPPORTED;
 80002ea:	4a09      	ldr	r2, [pc, #36]	; (8000310 <_initTestTab+0x38>)
 80002ec:	68fb      	ldr	r3, [r7, #12]
 80002ee:	4413      	add	r3, r2
 80002f0:	2202      	movs	r2, #2
 80002f2:	701a      	strb	r2, [r3, #0]
	for(uint32_t ctr=0;ctr<size;ctr++)
 80002f4:	68fb      	ldr	r3, [r7, #12]
 80002f6:	3301      	adds	r3, #1
 80002f8:	60fb      	str	r3, [r7, #12]
 80002fa:	78fb      	ldrb	r3, [r7, #3]
 80002fc:	68fa      	ldr	r2, [r7, #12]
 80002fe:	429a      	cmp	r2, r3
 8000300:	d3f3      	bcc.n	80002ea <_initTestTab+0x12>
	}
}
 8000302:	bf00      	nop
 8000304:	bf00      	nop
 8000306:	3714      	adds	r7, #20
 8000308:	46bd      	mov	sp, r7
 800030a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800030e:	4770      	bx	lr
 8000310:	2400002c 	.word	0x2400002c

08000314 <main>:
  * @param  None
  * @retval None
  *
  */
int main(void)
{
 8000314:	b580      	push	{r7, lr}
 8000316:	b082      	sub	sp, #8
 8000318:	af00      	add	r7, sp, #0

  /* Enable the CPU Cache */
	_initTestTab(_testResTab,TEST_NUMBER);
 800031a:	210a      	movs	r1, #10
 800031c:	4821      	ldr	r0, [pc, #132]	; (80003a4 <main+0x90>)
 800031e:	f7ff ffdb 	bl	80002d8 <_initTestTab>
         duration should be kept 1ms since PPP_TIMEOUT_VALUEs are defined and
         handled in milliseconds basis.
       - Set NVIC Group Priority to 4
       - Low Level Initialization
     */
  HAL_Init();
 8000322:	f000 fa03 	bl	800072c <HAL_Init>

  /* Configure the system clock to 400 MHz */
  SystemClock_Config();
 8000326:	f000 f849 	bl	80003bc <SystemClock_Config>

  /* -1- Initialize LEDs mounted on STM32H743ZI-NUCLEO board */
  //BSP_LED_Init(LED_YELLOW);

  /* -2- Configure EXTI15_10 (connected to PC.13 pin) in interrupt mode */
  EXTI15_10_IRQHandler_Config();
 800032a:	f000 f8df 	bl	80004ec <EXTI15_10_IRQHandler_Config>

  /* Infinite loop */
  while (1)
  {
    if(ButtonState != 0)
 800032e:	4b1e      	ldr	r3, [pc, #120]	; (80003a8 <main+0x94>)
 8000330:	681b      	ldr	r3, [r3, #0]
 8000332:	2b00      	cmp	r3, #0
 8000334:	d032      	beq.n	800039c <main+0x88>
    {
     /* Toggle LED1 */
     // BSP_LED_Toggle(LED_YELLOW);
      ButtonState = 0;
 8000336:	4b1c      	ldr	r3, [pc, #112]	; (80003a8 <main+0x94>)
 8000338:	2200      	movs	r2, #0
 800033a:	601a      	str	r2, [r3, #0]
      HAL_Delay(5); /* to avoid bounce when button pressed */
 800033c:	2005      	movs	r0, #5
 800033e:	f000 fa83 	bl	8000848 <HAL_Delay>


      switch(u8TestRes)
 8000342:	4b1a      	ldr	r3, [pc, #104]	; (80003ac <main+0x98>)
 8000344:	781b      	ldrb	r3, [r3, #0]
 8000346:	b2db      	uxtb	r3, r3
 8000348:	2b02      	cmp	r3, #2
 800034a:	d023      	beq.n	8000394 <main+0x80>
 800034c:	2b02      	cmp	r3, #2
 800034e:	dc27      	bgt.n	80003a0 <main+0x8c>
 8000350:	2b00      	cmp	r3, #0
 8000352:	d002      	beq.n	800035a <main+0x46>
 8000354:	2b01      	cmp	r3, #1
 8000356:	d008      	beq.n	800036a <main+0x56>
				u8TestRes=TEST_NOT_STARTED;
				break;
      	  }
      	  default:
      	  {
      		  break;
 8000358:	e022      	b.n	80003a0 <main+0x8c>
      		_initTestTab(_initTestTab,TEST_NUMBER);
 800035a:	210a      	movs	r1, #10
 800035c:	4814      	ldr	r0, [pc, #80]	; (80003b0 <main+0x9c>)
 800035e:	f7ff ffbb 	bl	80002d8 <_initTestTab>
      		  u8TestRes=TEST_IN_PROGRESS;
 8000362:	4b12      	ldr	r3, [pc, #72]	; (80003ac <main+0x98>)
 8000364:	2201      	movs	r2, #1
 8000366:	701a      	strb	r2, [r3, #0]
      		  break;
 8000368:	e01b      	b.n	80003a2 <main+0x8e>
			 for(uint32_t ctr=0;ctr<TEST_NUMBER;ctr++)
 800036a:	2300      	movs	r3, #0
 800036c:	607b      	str	r3, [r7, #4]
 800036e:	e007      	b.n	8000380 <main+0x6c>
				_testResTab[ctr]=TEST_OK;
 8000370:	4a0c      	ldr	r2, [pc, #48]	; (80003a4 <main+0x90>)
 8000372:	687b      	ldr	r3, [r7, #4]
 8000374:	4413      	add	r3, r2
 8000376:	2200      	movs	r2, #0
 8000378:	701a      	strb	r2, [r3, #0]
			 for(uint32_t ctr=0;ctr<TEST_NUMBER;ctr++)
 800037a:	687b      	ldr	r3, [r7, #4]
 800037c:	3301      	adds	r3, #1
 800037e:	607b      	str	r3, [r7, #4]
 8000380:	687b      	ldr	r3, [r7, #4]
 8000382:	2b09      	cmp	r3, #9
 8000384:	d9f4      	bls.n	8000370 <main+0x5c>
			 _testResTab[TEST_NUMBER-1]=TEST_KO;
 8000386:	4b07      	ldr	r3, [pc, #28]	; (80003a4 <main+0x90>)
 8000388:	2201      	movs	r2, #1
 800038a:	725a      	strb	r2, [r3, #9]
      		 u8TestRes=TEST_DONE;
 800038c:	4b07      	ldr	r3, [pc, #28]	; (80003ac <main+0x98>)
 800038e:	2202      	movs	r2, #2
 8000390:	701a      	strb	r2, [r3, #0]
      		  break;
 8000392:	e006      	b.n	80003a2 <main+0x8e>
				u8TestRes=TEST_NOT_STARTED;
 8000394:	4b05      	ldr	r3, [pc, #20]	; (80003ac <main+0x98>)
 8000396:	2200      	movs	r2, #0
 8000398:	701a      	strb	r2, [r3, #0]
				break;
 800039a:	e002      	b.n	80003a2 <main+0x8e>
      	  }
      }
    }
 800039c:	bf00      	nop
 800039e:	e7c6      	b.n	800032e <main+0x1a>
      		  break;
 80003a0:	bf00      	nop
    if(ButtonState != 0)
 80003a2:	e7c4      	b.n	800032e <main+0x1a>
 80003a4:	2400002c 	.word	0x2400002c
 80003a8:	24000038 	.word	0x24000038
 80003ac:	2400003c 	.word	0x2400003c
 80003b0:	080002d9 	.word	0x080002d9

080003b4 <Error_Handler>:
  * @brief  This function is executed in case of error occurrence.
  * @param  None
  * @retval None
  */
static void Error_Handler(void)
{
 80003b4:	b480      	push	{r7}
 80003b6:	af00      	add	r7, sp, #0
  /* Turn LED3 on */
  while(1)
 80003b8:	e7fe      	b.n	80003b8 <Error_Handler+0x4>
	...

080003bc <SystemClock_Config>:
  *            Flash Latency(WS)              = 4
  * @param  None
  * @retval None
  */
static void SystemClock_Config(void)
{
 80003bc:	b580      	push	{r7, lr}
 80003be:	b09e      	sub	sp, #120	; 0x78
 80003c0:	af00      	add	r7, sp, #0
  RCC_ClkInitTypeDef RCC_ClkInitStruct;
  RCC_OscInitTypeDef RCC_OscInitStruct;
  HAL_StatusTypeDef ret = HAL_OK;
 80003c2:	2300      	movs	r3, #0
 80003c4:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77

  /*!< Supply configuration update enable */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 80003c8:	2002      	movs	r0, #2
 80003ca:	f000 fd57 	bl	8000e7c <HAL_PWREx_ConfigSupply>

  /* The voltage scaling allows optimizing the power consumption when the device is
     clocked below the maximum system frequency, to update the voltage scaling value
     regarding system frequency refer to product datasheet.  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80003ce:	2300      	movs	r3, #0
 80003d0:	607b      	str	r3, [r7, #4]
 80003d2:	4b43      	ldr	r3, [pc, #268]	; (80004e0 <SystemClock_Config+0x124>)
 80003d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80003d6:	4a42      	ldr	r2, [pc, #264]	; (80004e0 <SystemClock_Config+0x124>)
 80003d8:	f023 0301 	bic.w	r3, r3, #1
 80003dc:	62d3      	str	r3, [r2, #44]	; 0x2c
 80003de:	4b40      	ldr	r3, [pc, #256]	; (80004e0 <SystemClock_Config+0x124>)
 80003e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80003e2:	f003 0301 	and.w	r3, r3, #1
 80003e6:	607b      	str	r3, [r7, #4]
 80003e8:	4b3e      	ldr	r3, [pc, #248]	; (80004e4 <SystemClock_Config+0x128>)
 80003ea:	699b      	ldr	r3, [r3, #24]
 80003ec:	4a3d      	ldr	r2, [pc, #244]	; (80004e4 <SystemClock_Config+0x128>)
 80003ee:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80003f2:	6193      	str	r3, [r2, #24]
 80003f4:	4b3b      	ldr	r3, [pc, #236]	; (80004e4 <SystemClock_Config+0x128>)
 80003f6:	699b      	ldr	r3, [r3, #24]
 80003f8:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80003fc:	607b      	str	r3, [r7, #4]
 80003fe:	687b      	ldr	r3, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000400:	bf00      	nop
 8000402:	4b38      	ldr	r3, [pc, #224]	; (80004e4 <SystemClock_Config+0x128>)
 8000404:	699b      	ldr	r3, [r3, #24]
 8000406:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800040a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800040e:	d1f8      	bne.n	8000402 <SystemClock_Config+0x46>

  /* Enable HSE Oscillator and activate PLL with HSE as source */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000410:	2301      	movs	r3, #1
 8000412:	60bb      	str	r3, [r7, #8]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000414:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8000418:	60fb      	str	r3, [r7, #12]
  RCC_OscInitStruct.HSIState = RCC_HSI_OFF;
 800041a:	2300      	movs	r3, #0
 800041c:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.CSIState = RCC_CSI_OFF;
 800041e:	2300      	movs	r3, #0
 8000420:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000422:	2302      	movs	r3, #2
 8000424:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000426:	2302      	movs	r3, #2
 8000428:	633b      	str	r3, [r7, #48]	; 0x30

  RCC_OscInitStruct.PLL.PLLM = 4;
 800042a:	2304      	movs	r3, #4
 800042c:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLN = 400;
 800042e:	f44f 73c8 	mov.w	r3, #400	; 0x190
 8000432:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000434:	2300      	movs	r3, #0
 8000436:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLP = 2;
 8000438:	2302      	movs	r3, #2
 800043a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLR = 2;
 800043c:	2302      	movs	r3, #2
 800043e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000440:	2304      	movs	r3, #4
 8000442:	643b      	str	r3, [r7, #64]	; 0x40

  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8000444:	2300      	movs	r3, #0
 8000446:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_2;
 8000448:	2308      	movs	r3, #8
 800044a:	64bb      	str	r3, [r7, #72]	; 0x48
  ret = HAL_RCC_OscConfig(&RCC_OscInitStruct);
 800044c:	f107 0308 	add.w	r3, r7, #8
 8000450:	4618      	mov	r0, r3
 8000452:	f000 fd4d 	bl	8000ef0 <HAL_RCC_OscConfig>
 8000456:	4603      	mov	r3, r0
 8000458:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
  if(ret != HAL_OK)
 800045c:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8000460:	2b00      	cmp	r3, #0
 8000462:	d001      	beq.n	8000468 <SystemClock_Config+0xac>
  {
    Error_Handler();
 8000464:	f7ff ffa6 	bl	80003b4 <Error_Handler>
  }

/* Select PLL as system clock source and configure  bus clocks dividers */
  RCC_ClkInitStruct.ClockType = (RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_D1PCLK1 | RCC_CLOCKTYPE_PCLK1 | \
 8000468:	233f      	movs	r3, #63	; 0x3f
 800046a:	657b      	str	r3, [r7, #84]	; 0x54
                                 RCC_CLOCKTYPE_PCLK2  | RCC_CLOCKTYPE_D3PCLK1);

  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800046c:	2303      	movs	r3, #3
 800046e:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000470:	2300      	movs	r3, #0
 8000472:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8000474:	2308      	movs	r3, #8
 8000476:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8000478:	2340      	movs	r3, #64	; 0x40
 800047a:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 800047c:	2340      	movs	r3, #64	; 0x40
 800047e:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8000480:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000484:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8000486:	2340      	movs	r3, #64	; 0x40
 8000488:	673b      	str	r3, [r7, #112]	; 0x70
  ret = HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4);
 800048a:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800048e:	2104      	movs	r1, #4
 8000490:	4618      	mov	r0, r3
 8000492:	f001 f90d 	bl	80016b0 <HAL_RCC_ClockConfig>
 8000496:	4603      	mov	r3, r0
 8000498:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
  if(ret != HAL_OK)
 800049c:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 80004a0:	2b00      	cmp	r3, #0
 80004a2:	d001      	beq.n	80004a8 <SystemClock_Config+0xec>
  {
    Error_Handler();
 80004a4:	f7ff ff86 	bl	80003b4 <Error_Handler>
  }

  /*activate CSI clock mondatory for I/O Compensation Cell*/
  __HAL_RCC_CSI_ENABLE() ;
 80004a8:	4b0f      	ldr	r3, [pc, #60]	; (80004e8 <SystemClock_Config+0x12c>)
 80004aa:	681b      	ldr	r3, [r3, #0]
 80004ac:	4a0e      	ldr	r2, [pc, #56]	; (80004e8 <SystemClock_Config+0x12c>)
 80004ae:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80004b2:	6013      	str	r3, [r2, #0]

  /* Enable SYSCFG clock mondatory for I/O Compensation Cell */
  __HAL_RCC_SYSCFG_CLK_ENABLE() ;
 80004b4:	4b0c      	ldr	r3, [pc, #48]	; (80004e8 <SystemClock_Config+0x12c>)
 80004b6:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80004ba:	4a0b      	ldr	r2, [pc, #44]	; (80004e8 <SystemClock_Config+0x12c>)
 80004bc:	f043 0302 	orr.w	r3, r3, #2
 80004c0:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 80004c4:	4b08      	ldr	r3, [pc, #32]	; (80004e8 <SystemClock_Config+0x12c>)
 80004c6:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80004ca:	f003 0302 	and.w	r3, r3, #2
 80004ce:	603b      	str	r3, [r7, #0]
 80004d0:	683b      	ldr	r3, [r7, #0]

  /* Enables the I/O Compensation Cell */
  HAL_EnableCompensationCell();
 80004d2:	f000 f9e9 	bl	80008a8 <HAL_EnableCompensationCell>

}
 80004d6:	bf00      	nop
 80004d8:	3778      	adds	r7, #120	; 0x78
 80004da:	46bd      	mov	sp, r7
 80004dc:	bd80      	pop	{r7, pc}
 80004de:	bf00      	nop
 80004e0:	58000400 	.word	0x58000400
 80004e4:	58024800 	.word	0x58024800
 80004e8:	58024400 	.word	0x58024400

080004ec <EXTI15_10_IRQHandler_Config>:
  * @brief  Configures EXTI lines 15 to 10 (connected to PC.13 pin) in interrupt mode
  * @param  None
  * @retval None
  */
static void EXTI15_10_IRQHandler_Config(void)
{
 80004ec:	b580      	push	{r7, lr}
 80004ee:	b086      	sub	sp, #24
 80004f0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef   GPIO_InitStructure;

  /* Enable GPIOC clock */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80004f2:	4b13      	ldr	r3, [pc, #76]	; (8000540 <EXTI15_10_IRQHandler_Config+0x54>)
 80004f4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80004f8:	4a11      	ldr	r2, [pc, #68]	; (8000540 <EXTI15_10_IRQHandler_Config+0x54>)
 80004fa:	f043 0304 	orr.w	r3, r3, #4
 80004fe:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000502:	4b0f      	ldr	r3, [pc, #60]	; (8000540 <EXTI15_10_IRQHandler_Config+0x54>)
 8000504:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000508:	f003 0304 	and.w	r3, r3, #4
 800050c:	603b      	str	r3, [r7, #0]
 800050e:	683b      	ldr	r3, [r7, #0]

  /* Configure PC.13 pin as input floating */
  GPIO_InitStructure.Mode = GPIO_MODE_IT_RISING;
 8000510:	4b0c      	ldr	r3, [pc, #48]	; (8000544 <EXTI15_10_IRQHandler_Config+0x58>)
 8000512:	60bb      	str	r3, [r7, #8]
  GPIO_InitStructure.Pull = GPIO_NOPULL;
 8000514:	2300      	movs	r3, #0
 8000516:	60fb      	str	r3, [r7, #12]
  GPIO_InitStructure.Pin = GPIO_PIN_13;
 8000518:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800051c:	607b      	str	r3, [r7, #4]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStructure);
 800051e:	1d3b      	adds	r3, r7, #4
 8000520:	4619      	mov	r1, r3
 8000522:	4809      	ldr	r0, [pc, #36]	; (8000548 <EXTI15_10_IRQHandler_Config+0x5c>)
 8000524:	f000 fae0 	bl	8000ae8 <HAL_GPIO_Init>

  /* Enable and set EXTI lines 15 to 10 Interrupt to the lowest priority */
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 2, 0);
 8000528:	2200      	movs	r2, #0
 800052a:	2102      	movs	r1, #2
 800052c:	2028      	movs	r0, #40	; 0x28
 800052e:	f000 faa6 	bl	8000a7e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000532:	2028      	movs	r0, #40	; 0x28
 8000534:	f000 fabd 	bl	8000ab2 <HAL_NVIC_EnableIRQ>
}
 8000538:	bf00      	nop
 800053a:	3718      	adds	r7, #24
 800053c:	46bd      	mov	sp, r7
 800053e:	bd80      	pop	{r7, pc}
 8000540:	58024400 	.word	0x58024400
 8000544:	11110000 	.word	0x11110000
 8000548:	58020800 	.word	0x58020800

0800054c <HAL_GPIO_EXTI_Callback>:
  * @brief EXTI line detection callbacks
  * @param GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 800054c:	b480      	push	{r7}
 800054e:	b083      	sub	sp, #12
 8000550:	af00      	add	r7, sp, #0
 8000552:	4603      	mov	r3, r0
 8000554:	80fb      	strh	r3, [r7, #6]
  if (GPIO_Pin == GPIO_PIN_13)
 8000556:	88fb      	ldrh	r3, [r7, #6]
 8000558:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800055c:	d102      	bne.n	8000564 <HAL_GPIO_EXTI_Callback+0x18>
  {
    ButtonState = 1;
 800055e:	4b04      	ldr	r3, [pc, #16]	; (8000570 <HAL_GPIO_EXTI_Callback+0x24>)
 8000560:	2201      	movs	r2, #1
 8000562:	601a      	str	r2, [r3, #0]
  }
}
 8000564:	bf00      	nop
 8000566:	370c      	adds	r7, #12
 8000568:	46bd      	mov	sp, r7
 800056a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800056e:	4770      	bx	lr
 8000570:	24000038 	.word	0x24000038

08000574 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000574:	b480      	push	{r7}
 8000576:	b083      	sub	sp, #12
 8000578:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800057a:	4b0a      	ldr	r3, [pc, #40]	; (80005a4 <HAL_MspInit+0x30>)
 800057c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000580:	4a08      	ldr	r2, [pc, #32]	; (80005a4 <HAL_MspInit+0x30>)
 8000582:	f043 0302 	orr.w	r3, r3, #2
 8000586:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 800058a:	4b06      	ldr	r3, [pc, #24]	; (80005a4 <HAL_MspInit+0x30>)
 800058c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000590:	f003 0302 	and.w	r3, r3, #2
 8000594:	607b      	str	r3, [r7, #4]
 8000596:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000598:	bf00      	nop
 800059a:	370c      	adds	r7, #12
 800059c:	46bd      	mov	sp, r7
 800059e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005a2:	4770      	bx	lr
 80005a4:	58024400 	.word	0x58024400

080005a8 <NMI_Handler>:
  * @brief  This function handles NMI exception.
  * @param  None
  * @retval None
  */
void NMI_Handler(void)
{
 80005a8:	b480      	push	{r7}
 80005aa:	af00      	add	r7, sp, #0
}
 80005ac:	bf00      	nop
 80005ae:	46bd      	mov	sp, r7
 80005b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005b4:	4770      	bx	lr

080005b6 <HardFault_Handler>:
  * @brief  This function handles Hard Fault exception.
  * @param  None
  * @retval None
  */
void HardFault_Handler(void)
{
 80005b6:	b480      	push	{r7}
 80005b8:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Hard Fault exception occurs */
  while (1)
 80005ba:	e7fe      	b.n	80005ba <HardFault_Handler+0x4>

080005bc <MemManage_Handler>:
  * @brief  This function handles Memory Manage exception.
  * @param  None
  * @retval None
  */
void MemManage_Handler(void)
{
 80005bc:	b480      	push	{r7}
 80005be:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Memory Manage exception occurs */
  while (1)
 80005c0:	e7fe      	b.n	80005c0 <MemManage_Handler+0x4>

080005c2 <BusFault_Handler>:
  * @brief  This function handles Bus Fault exception.
  * @param  None
  * @retval None
  */
void BusFault_Handler(void)
{
 80005c2:	b480      	push	{r7}
 80005c4:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Bus Fault exception occurs */
  while (1)
 80005c6:	e7fe      	b.n	80005c6 <BusFault_Handler+0x4>

080005c8 <UsageFault_Handler>:
  * @brief  This function handles Usage Fault exception.
  * @param  None
  * @retval None
  */
void UsageFault_Handler(void)
{
 80005c8:	b480      	push	{r7}
 80005ca:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Usage Fault exception occurs */
  while (1)
 80005cc:	e7fe      	b.n	80005cc <UsageFault_Handler+0x4>

080005ce <SVC_Handler>:
  * @brief  This function handles SVCall exception.
  * @param  None
  * @retval None
  */
void SVC_Handler(void)
{
 80005ce:	b480      	push	{r7}
 80005d0:	af00      	add	r7, sp, #0
}
 80005d2:	bf00      	nop
 80005d4:	46bd      	mov	sp, r7
 80005d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005da:	4770      	bx	lr

080005dc <DebugMon_Handler>:
  * @brief  This function handles Debug Monitor exception.
  * @param  None
  * @retval None
  */
void DebugMon_Handler(void)
{
 80005dc:	b480      	push	{r7}
 80005de:	af00      	add	r7, sp, #0
}
 80005e0:	bf00      	nop
 80005e2:	46bd      	mov	sp, r7
 80005e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005e8:	4770      	bx	lr

080005ea <PendSV_Handler>:
  * @brief  This function handles PendSVC exception.
  * @param  None
  * @retval None
  */
void PendSV_Handler(void)
{
 80005ea:	b480      	push	{r7}
 80005ec:	af00      	add	r7, sp, #0
}
 80005ee:	bf00      	nop
 80005f0:	46bd      	mov	sp, r7
 80005f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005f6:	4770      	bx	lr

080005f8 <SysTick_Handler>:
  * @brief  This function handles SysTick Handler.
  * @param  None
  * @retval None
  */
void SysTick_Handler(void)
{
 80005f8:	b580      	push	{r7, lr}
 80005fa:	af00      	add	r7, sp, #0
  HAL_IncTick();
 80005fc:	f000 f904 	bl	8000808 <HAL_IncTick>
}
 8000600:	bf00      	nop
 8000602:	bd80      	pop	{r7, pc}

08000604 <EXTI15_10_IRQHandler>:
  * @brief  This function handles external lines 15 to 10 interrupt request.
  * @param  None
  * @retval None
  */
void EXTI15_10_IRQHandler(void)
{
 8000604:	b580      	push	{r7, lr}
 8000606:	af00      	add	r7, sp, #0
  HAL_GPIO_EXTI_IRQHandler(BUTTON_USER_PIN);
 8000608:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 800060c:	f000 fc1c 	bl	8000e48 <HAL_GPIO_EXTI_IRQHandler>
}
 8000610:	bf00      	nop
 8000612:	bd80      	pop	{r7, pc}

08000614 <SystemInit>:
  *         Initialize the FPU setting, vector table location.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000614:	b480      	push	{r7}
 8000616:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */
    
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000618:	4b29      	ldr	r3, [pc, #164]	; (80006c0 <SystemInit+0xac>)
 800061a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800061e:	4a28      	ldr	r2, [pc, #160]	; (80006c0 <SystemInit+0xac>)
 8000620:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000624:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8000628:	4b26      	ldr	r3, [pc, #152]	; (80006c4 <SystemInit+0xb0>)
 800062a:	681b      	ldr	r3, [r3, #0]
 800062c:	4a25      	ldr	r2, [pc, #148]	; (80006c4 <SystemInit+0xb0>)
 800062e:	f043 0301 	orr.w	r3, r3, #1
 8000632:	6013      	str	r3, [r2, #0]
  
  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8000634:	4b23      	ldr	r3, [pc, #140]	; (80006c4 <SystemInit+0xb0>)
 8000636:	2200      	movs	r2, #0
 8000638:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, CSSON , CSION,RC48ON, CSIKERON PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 800063a:	4b22      	ldr	r3, [pc, #136]	; (80006c4 <SystemInit+0xb0>)
 800063c:	681a      	ldr	r2, [r3, #0]
 800063e:	4921      	ldr	r1, [pc, #132]	; (80006c4 <SystemInit+0xb0>)
 8000640:	4b21      	ldr	r3, [pc, #132]	; (80006c8 <SystemInit+0xb4>)
 8000642:	4013      	ands	r3, r2
 8000644:	600b      	str	r3, [r1, #0]

  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8000646:	4b1f      	ldr	r3, [pc, #124]	; (80006c4 <SystemInit+0xb0>)
 8000648:	2200      	movs	r2, #0
 800064a:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 800064c:	4b1d      	ldr	r3, [pc, #116]	; (80006c4 <SystemInit+0xb0>)
 800064e:	2200      	movs	r2, #0
 8000650:	61da      	str	r2, [r3, #28]
  
  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8000652:	4b1c      	ldr	r3, [pc, #112]	; (80006c4 <SystemInit+0xb0>)
 8000654:	2200      	movs	r2, #0
 8000656:	621a      	str	r2, [r3, #32]

  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x00000000;
 8000658:	4b1a      	ldr	r3, [pc, #104]	; (80006c4 <SystemInit+0xb0>)
 800065a:	2200      	movs	r2, #0
 800065c:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00000000;
 800065e:	4b19      	ldr	r3, [pc, #100]	; (80006c4 <SystemInit+0xb0>)
 8000660:	2200      	movs	r2, #0
 8000662:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x00000000;
 8000664:	4b17      	ldr	r3, [pc, #92]	; (80006c4 <SystemInit+0xb0>)
 8000666:	2200      	movs	r2, #0
 8000668:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 800066a:	4b16      	ldr	r3, [pc, #88]	; (80006c4 <SystemInit+0xb0>)
 800066c:	2200      	movs	r2, #0
 800066e:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x00000000;
 8000670:	4b14      	ldr	r3, [pc, #80]	; (80006c4 <SystemInit+0xb0>)
 8000672:	2200      	movs	r2, #0
 8000674:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */
  
  RCC->PLL2FRACR = 0x00000000;
 8000676:	4b13      	ldr	r3, [pc, #76]	; (80006c4 <SystemInit+0xb0>)
 8000678:	2200      	movs	r2, #0
 800067a:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x00000000;
 800067c:	4b11      	ldr	r3, [pc, #68]	; (80006c4 <SystemInit+0xb0>)
 800067e:	2200      	movs	r2, #0
 8000680:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8000682:	4b10      	ldr	r3, [pc, #64]	; (80006c4 <SystemInit+0xb0>)
 8000684:	2200      	movs	r2, #0
 8000686:	645a      	str	r2, [r3, #68]	; 0x44
  
  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000688:	4b0e      	ldr	r3, [pc, #56]	; (80006c4 <SystemInit+0xb0>)
 800068a:	681b      	ldr	r3, [r3, #0]
 800068c:	4a0d      	ldr	r2, [pc, #52]	; (80006c4 <SystemInit+0xb0>)
 800068e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000692:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8000694:	4b0b      	ldr	r3, [pc, #44]	; (80006c4 <SystemInit+0xb0>)
 8000696:	2200      	movs	r2, #0
 8000698:	661a      	str	r2, [r3, #96]	; 0x60

  /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 800069a:	4b0c      	ldr	r3, [pc, #48]	; (80006cc <SystemInit+0xb8>)
 800069c:	681a      	ldr	r2, [r3, #0]
 800069e:	4b0c      	ldr	r3, [pc, #48]	; (80006d0 <SystemInit+0xbc>)
 80006a0:	4013      	ands	r3, r2
 80006a2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80006a6:	d202      	bcs.n	80006ae <SystemInit+0x9a>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 80006a8:	4b0a      	ldr	r3, [pc, #40]	; (80006d4 <SystemInit+0xc0>)
 80006aa:	2201      	movs	r2, #1
 80006ac:	601a      	str	r2, [r3, #0]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = D1_AXISRAM_BASE  | VECT_TAB_OFFSET;       /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BANK1_BASE | VECT_TAB_OFFSET;       /* Vector Table Relocation in Internal FLASH */
 80006ae:	4b04      	ldr	r3, [pc, #16]	; (80006c0 <SystemInit+0xac>)
 80006b0:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80006b4:	609a      	str	r2, [r3, #8]
#endif  


}
 80006b6:	bf00      	nop
 80006b8:	46bd      	mov	sp, r7
 80006ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006be:	4770      	bx	lr
 80006c0:	e000ed00 	.word	0xe000ed00
 80006c4:	58024400 	.word	0x58024400
 80006c8:	eaf6ed7f 	.word	0xeaf6ed7f
 80006cc:	5c001000 	.word	0x5c001000
 80006d0:	ffff0000 	.word	0xffff0000
 80006d4:	51008108 	.word	0x51008108

080006d8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80006d8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000710 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 80006dc:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 80006de:	e003      	b.n	80006e8 <LoopCopyDataInit>

080006e0 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 80006e0:	4b0c      	ldr	r3, [pc, #48]	; (8000714 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 80006e2:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 80006e4:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80006e6:	3104      	adds	r1, #4

080006e8 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 80006e8:	480b      	ldr	r0, [pc, #44]	; (8000718 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 80006ea:	4b0c      	ldr	r3, [pc, #48]	; (800071c <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 80006ec:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80006ee:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 80006f0:	d3f6      	bcc.n	80006e0 <CopyDataInit>
  ldr  r2, =_sbss
 80006f2:	4a0b      	ldr	r2, [pc, #44]	; (8000720 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 80006f4:	e002      	b.n	80006fc <LoopFillZerobss>

080006f6 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 80006f6:	2300      	movs	r3, #0
  str  r3, [r2], #4
 80006f8:	f842 3b04 	str.w	r3, [r2], #4

080006fc <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 80006fc:	4b09      	ldr	r3, [pc, #36]	; (8000724 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 80006fe:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8000700:	d3f9      	bcc.n	80006f6 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8000702:	f7ff ff87 	bl	8000614 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000706:	f001 faf1 	bl	8001cec <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800070a:	f7ff fe03 	bl	8000314 <main>
  bx  lr    
 800070e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000710:	24080000 	.word	0x24080000
  ldr  r3, =_sidata
 8000714:	08001d64 	.word	0x08001d64
  ldr  r0, =_sdata
 8000718:	24000000 	.word	0x24000000
  ldr  r3, =_edata
 800071c:	24000010 	.word	0x24000010
  ldr  r2, =_sbss
 8000720:	24000010 	.word	0x24000010
  ldr  r3, = _ebss
 8000724:	24000044 	.word	0x24000044

08000728 <ADC3_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000728:	e7fe      	b.n	8000728 <ADC3_IRQHandler>
	...

0800072c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800072c:	b580      	push	{r7, lr}
 800072e:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000730:	2003      	movs	r0, #3
 8000732:	f000 f999 	bl	8000a68 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8000736:	f001 f95f 	bl	80019f8 <HAL_RCC_GetSysClockFreq>
 800073a:	4602      	mov	r2, r0
 800073c:	4b13      	ldr	r3, [pc, #76]	; (800078c <HAL_Init+0x60>)
 800073e:	699b      	ldr	r3, [r3, #24]
 8000740:	0a1b      	lsrs	r3, r3, #8
 8000742:	f003 030f 	and.w	r3, r3, #15
 8000746:	4912      	ldr	r1, [pc, #72]	; (8000790 <HAL_Init+0x64>)
 8000748:	5ccb      	ldrb	r3, [r1, r3]
 800074a:	f003 031f 	and.w	r3, r3, #31
 800074e:	fa22 f303 	lsr.w	r3, r2, r3
 8000752:	4a10      	ldr	r2, [pc, #64]	; (8000794 <HAL_Init+0x68>)
 8000754:	6013      	str	r3, [r2, #0]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (SystemCoreClock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8000756:	4b0f      	ldr	r3, [pc, #60]	; (8000794 <HAL_Init+0x68>)
 8000758:	681a      	ldr	r2, [r3, #0]
 800075a:	4b0c      	ldr	r3, [pc, #48]	; (800078c <HAL_Init+0x60>)
 800075c:	699b      	ldr	r3, [r3, #24]
 800075e:	f003 030f 	and.w	r3, r3, #15
 8000762:	490b      	ldr	r1, [pc, #44]	; (8000790 <HAL_Init+0x64>)
 8000764:	5ccb      	ldrb	r3, [r1, r3]
 8000766:	f003 031f 	and.w	r3, r3, #31
 800076a:	fa22 f303 	lsr.w	r3, r2, r3
 800076e:	4a0a      	ldr	r2, [pc, #40]	; (8000798 <HAL_Init+0x6c>)
 8000770:	6013      	str	r3, [r2, #0]
#else
  SystemD2Clock = (SystemCoreClock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE)>> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
#endif

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000772:	200f      	movs	r0, #15
 8000774:	f000 f812 	bl	800079c <HAL_InitTick>
 8000778:	4603      	mov	r3, r0
 800077a:	2b00      	cmp	r3, #0
 800077c:	d001      	beq.n	8000782 <HAL_Init+0x56>
  {
    return HAL_ERROR;
 800077e:	2301      	movs	r3, #1
 8000780:	e002      	b.n	8000788 <HAL_Init+0x5c>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8000782:	f7ff fef7 	bl	8000574 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000786:	2300      	movs	r3, #0
}
 8000788:	4618      	mov	r0, r3
 800078a:	bd80      	pop	{r7, pc}
 800078c:	58024400 	.word	0x58024400
 8000790:	08001d4c 	.word	0x08001d4c
 8000794:	24000000 	.word	0x24000000
 8000798:	24000004 	.word	0x24000004

0800079c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800079c:	b580      	push	{r7, lr}
 800079e:	b082      	sub	sp, #8
 80007a0:	af00      	add	r7, sp, #0
 80007a2:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 80007a4:	4b15      	ldr	r3, [pc, #84]	; (80007fc <HAL_InitTick+0x60>)
 80007a6:	781b      	ldrb	r3, [r3, #0]
 80007a8:	2b00      	cmp	r3, #0
 80007aa:	d101      	bne.n	80007b0 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 80007ac:	2301      	movs	r3, #1
 80007ae:	e021      	b.n	80007f4 <HAL_InitTick+0x58>
      return HAL_ERROR;
    }
  }
#else
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 80007b0:	4b13      	ldr	r3, [pc, #76]	; (8000800 <HAL_InitTick+0x64>)
 80007b2:	681a      	ldr	r2, [r3, #0]
 80007b4:	4b11      	ldr	r3, [pc, #68]	; (80007fc <HAL_InitTick+0x60>)
 80007b6:	781b      	ldrb	r3, [r3, #0]
 80007b8:	4619      	mov	r1, r3
 80007ba:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80007be:	fbb3 f3f1 	udiv	r3, r3, r1
 80007c2:	fbb2 f3f3 	udiv	r3, r2, r3
 80007c6:	4618      	mov	r0, r3
 80007c8:	f000 f981 	bl	8000ace <HAL_SYSTICK_Config>
 80007cc:	4603      	mov	r3, r0
 80007ce:	2b00      	cmp	r3, #0
 80007d0:	d001      	beq.n	80007d6 <HAL_InitTick+0x3a>
  {
    return HAL_ERROR;
 80007d2:	2301      	movs	r3, #1
 80007d4:	e00e      	b.n	80007f4 <HAL_InitTick+0x58>
  }
#endif

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80007d6:	687b      	ldr	r3, [r7, #4]
 80007d8:	2b0f      	cmp	r3, #15
 80007da:	d80a      	bhi.n	80007f2 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80007dc:	2200      	movs	r2, #0
 80007de:	6879      	ldr	r1, [r7, #4]
 80007e0:	f04f 30ff 	mov.w	r0, #4294967295
 80007e4:	f000 f94b 	bl	8000a7e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80007e8:	4a06      	ldr	r2, [pc, #24]	; (8000804 <HAL_InitTick+0x68>)
 80007ea:	687b      	ldr	r3, [r7, #4]
 80007ec:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80007ee:	2300      	movs	r3, #0
 80007f0:	e000      	b.n	80007f4 <HAL_InitTick+0x58>
    return HAL_ERROR;
 80007f2:	2301      	movs	r3, #1
}
 80007f4:	4618      	mov	r0, r3
 80007f6:	3708      	adds	r7, #8
 80007f8:	46bd      	mov	sp, r7
 80007fa:	bd80      	pop	{r7, pc}
 80007fc:	2400000c 	.word	0x2400000c
 8000800:	24000000 	.word	0x24000000
 8000804:	24000008 	.word	0x24000008

08000808 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000808:	b480      	push	{r7}
 800080a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 800080c:	4b06      	ldr	r3, [pc, #24]	; (8000828 <HAL_IncTick+0x20>)
 800080e:	781b      	ldrb	r3, [r3, #0]
 8000810:	461a      	mov	r2, r3
 8000812:	4b06      	ldr	r3, [pc, #24]	; (800082c <HAL_IncTick+0x24>)
 8000814:	681b      	ldr	r3, [r3, #0]
 8000816:	4413      	add	r3, r2
 8000818:	4a04      	ldr	r2, [pc, #16]	; (800082c <HAL_IncTick+0x24>)
 800081a:	6013      	str	r3, [r2, #0]
}
 800081c:	bf00      	nop
 800081e:	46bd      	mov	sp, r7
 8000820:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000824:	4770      	bx	lr
 8000826:	bf00      	nop
 8000828:	2400000c 	.word	0x2400000c
 800082c:	24000040 	.word	0x24000040

08000830 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000830:	b480      	push	{r7}
 8000832:	af00      	add	r7, sp, #0
  return uwTick;
 8000834:	4b03      	ldr	r3, [pc, #12]	; (8000844 <HAL_GetTick+0x14>)
 8000836:	681b      	ldr	r3, [r3, #0]
}
 8000838:	4618      	mov	r0, r3
 800083a:	46bd      	mov	sp, r7
 800083c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000840:	4770      	bx	lr
 8000842:	bf00      	nop
 8000844:	24000040 	.word	0x24000040

08000848 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000848:	b580      	push	{r7, lr}
 800084a:	b084      	sub	sp, #16
 800084c:	af00      	add	r7, sp, #0
 800084e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000850:	f7ff ffee 	bl	8000830 <HAL_GetTick>
 8000854:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000856:	687b      	ldr	r3, [r7, #4]
 8000858:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800085a:	68fb      	ldr	r3, [r7, #12]
 800085c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000860:	d005      	beq.n	800086e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000862:	4b0a      	ldr	r3, [pc, #40]	; (800088c <HAL_Delay+0x44>)
 8000864:	781b      	ldrb	r3, [r3, #0]
 8000866:	461a      	mov	r2, r3
 8000868:	68fb      	ldr	r3, [r7, #12]
 800086a:	4413      	add	r3, r2
 800086c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800086e:	bf00      	nop
 8000870:	f7ff ffde 	bl	8000830 <HAL_GetTick>
 8000874:	4602      	mov	r2, r0
 8000876:	68bb      	ldr	r3, [r7, #8]
 8000878:	1ad3      	subs	r3, r2, r3
 800087a:	68fa      	ldr	r2, [r7, #12]
 800087c:	429a      	cmp	r2, r3
 800087e:	d8f7      	bhi.n	8000870 <HAL_Delay+0x28>
  {
  }
}
 8000880:	bf00      	nop
 8000882:	bf00      	nop
 8000884:	3710      	adds	r7, #16
 8000886:	46bd      	mov	sp, r7
 8000888:	bd80      	pop	{r7, pc}
 800088a:	bf00      	nop
 800088c:	2400000c 	.word	0x2400000c

08000890 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8000890:	b480      	push	{r7}
 8000892:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8000894:	4b03      	ldr	r3, [pc, #12]	; (80008a4 <HAL_GetREVID+0x14>)
 8000896:	681b      	ldr	r3, [r3, #0]
 8000898:	0c1b      	lsrs	r3, r3, #16
}
 800089a:	4618      	mov	r0, r3
 800089c:	46bd      	mov	sp, r7
 800089e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008a2:	4770      	bx	lr
 80008a4:	5c001000 	.word	0x5c001000

080008a8 <HAL_EnableCompensationCell>:
  * @note   The I/O compensation cell can be used only when the device supply
  *         voltage ranges from 2.4 to 3.6 V.
  * @retval None
  */
void HAL_EnableCompensationCell(void)
{
 80008a8:	b480      	push	{r7}
 80008aa:	af00      	add	r7, sp, #0
  SET_BIT(SYSCFG->CCCSR, SYSCFG_CCCSR_EN) ;
 80008ac:	4b05      	ldr	r3, [pc, #20]	; (80008c4 <HAL_EnableCompensationCell+0x1c>)
 80008ae:	6a1b      	ldr	r3, [r3, #32]
 80008b0:	4a04      	ldr	r2, [pc, #16]	; (80008c4 <HAL_EnableCompensationCell+0x1c>)
 80008b2:	f043 0301 	orr.w	r3, r3, #1
 80008b6:	6213      	str	r3, [r2, #32]
}
 80008b8:	bf00      	nop
 80008ba:	46bd      	mov	sp, r7
 80008bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008c0:	4770      	bx	lr
 80008c2:	bf00      	nop
 80008c4:	58000400 	.word	0x58000400

080008c8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80008c8:	b480      	push	{r7}
 80008ca:	b085      	sub	sp, #20
 80008cc:	af00      	add	r7, sp, #0
 80008ce:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80008d0:	687b      	ldr	r3, [r7, #4]
 80008d2:	f003 0307 	and.w	r3, r3, #7
 80008d6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80008d8:	4b0b      	ldr	r3, [pc, #44]	; (8000908 <__NVIC_SetPriorityGrouping+0x40>)
 80008da:	68db      	ldr	r3, [r3, #12]
 80008dc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80008de:	68ba      	ldr	r2, [r7, #8]
 80008e0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80008e4:	4013      	ands	r3, r2
 80008e6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80008e8:	68fb      	ldr	r3, [r7, #12]
 80008ea:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80008ec:	68bb      	ldr	r3, [r7, #8]
 80008ee:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80008f0:	4b06      	ldr	r3, [pc, #24]	; (800090c <__NVIC_SetPriorityGrouping+0x44>)
 80008f2:	4313      	orrs	r3, r2
 80008f4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80008f6:	4a04      	ldr	r2, [pc, #16]	; (8000908 <__NVIC_SetPriorityGrouping+0x40>)
 80008f8:	68bb      	ldr	r3, [r7, #8]
 80008fa:	60d3      	str	r3, [r2, #12]
}
 80008fc:	bf00      	nop
 80008fe:	3714      	adds	r7, #20
 8000900:	46bd      	mov	sp, r7
 8000902:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000906:	4770      	bx	lr
 8000908:	e000ed00 	.word	0xe000ed00
 800090c:	05fa0000 	.word	0x05fa0000

08000910 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000910:	b480      	push	{r7}
 8000912:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000914:	4b04      	ldr	r3, [pc, #16]	; (8000928 <__NVIC_GetPriorityGrouping+0x18>)
 8000916:	68db      	ldr	r3, [r3, #12]
 8000918:	0a1b      	lsrs	r3, r3, #8
 800091a:	f003 0307 	and.w	r3, r3, #7
}
 800091e:	4618      	mov	r0, r3
 8000920:	46bd      	mov	sp, r7
 8000922:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000926:	4770      	bx	lr
 8000928:	e000ed00 	.word	0xe000ed00

0800092c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800092c:	b480      	push	{r7}
 800092e:	b083      	sub	sp, #12
 8000930:	af00      	add	r7, sp, #0
 8000932:	4603      	mov	r3, r0
 8000934:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8000936:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800093a:	2b00      	cmp	r3, #0
 800093c:	db0b      	blt.n	8000956 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800093e:	88fb      	ldrh	r3, [r7, #6]
 8000940:	f003 021f 	and.w	r2, r3, #31
 8000944:	4907      	ldr	r1, [pc, #28]	; (8000964 <__NVIC_EnableIRQ+0x38>)
 8000946:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800094a:	095b      	lsrs	r3, r3, #5
 800094c:	2001      	movs	r0, #1
 800094e:	fa00 f202 	lsl.w	r2, r0, r2
 8000952:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000956:	bf00      	nop
 8000958:	370c      	adds	r7, #12
 800095a:	46bd      	mov	sp, r7
 800095c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000960:	4770      	bx	lr
 8000962:	bf00      	nop
 8000964:	e000e100 	.word	0xe000e100

08000968 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000968:	b480      	push	{r7}
 800096a:	b083      	sub	sp, #12
 800096c:	af00      	add	r7, sp, #0
 800096e:	4603      	mov	r3, r0
 8000970:	6039      	str	r1, [r7, #0]
 8000972:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8000974:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000978:	2b00      	cmp	r3, #0
 800097a:	db0a      	blt.n	8000992 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800097c:	683b      	ldr	r3, [r7, #0]
 800097e:	b2da      	uxtb	r2, r3
 8000980:	490c      	ldr	r1, [pc, #48]	; (80009b4 <__NVIC_SetPriority+0x4c>)
 8000982:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000986:	0112      	lsls	r2, r2, #4
 8000988:	b2d2      	uxtb	r2, r2
 800098a:	440b      	add	r3, r1
 800098c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000990:	e00a      	b.n	80009a8 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000992:	683b      	ldr	r3, [r7, #0]
 8000994:	b2da      	uxtb	r2, r3
 8000996:	4908      	ldr	r1, [pc, #32]	; (80009b8 <__NVIC_SetPriority+0x50>)
 8000998:	88fb      	ldrh	r3, [r7, #6]
 800099a:	f003 030f 	and.w	r3, r3, #15
 800099e:	3b04      	subs	r3, #4
 80009a0:	0112      	lsls	r2, r2, #4
 80009a2:	b2d2      	uxtb	r2, r2
 80009a4:	440b      	add	r3, r1
 80009a6:	761a      	strb	r2, [r3, #24]
}
 80009a8:	bf00      	nop
 80009aa:	370c      	adds	r7, #12
 80009ac:	46bd      	mov	sp, r7
 80009ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009b2:	4770      	bx	lr
 80009b4:	e000e100 	.word	0xe000e100
 80009b8:	e000ed00 	.word	0xe000ed00

080009bc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80009bc:	b480      	push	{r7}
 80009be:	b089      	sub	sp, #36	; 0x24
 80009c0:	af00      	add	r7, sp, #0
 80009c2:	60f8      	str	r0, [r7, #12]
 80009c4:	60b9      	str	r1, [r7, #8]
 80009c6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80009c8:	68fb      	ldr	r3, [r7, #12]
 80009ca:	f003 0307 	and.w	r3, r3, #7
 80009ce:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80009d0:	69fb      	ldr	r3, [r7, #28]
 80009d2:	f1c3 0307 	rsb	r3, r3, #7
 80009d6:	2b04      	cmp	r3, #4
 80009d8:	bf28      	it	cs
 80009da:	2304      	movcs	r3, #4
 80009dc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80009de:	69fb      	ldr	r3, [r7, #28]
 80009e0:	3304      	adds	r3, #4
 80009e2:	2b06      	cmp	r3, #6
 80009e4:	d902      	bls.n	80009ec <NVIC_EncodePriority+0x30>
 80009e6:	69fb      	ldr	r3, [r7, #28]
 80009e8:	3b03      	subs	r3, #3
 80009ea:	e000      	b.n	80009ee <NVIC_EncodePriority+0x32>
 80009ec:	2300      	movs	r3, #0
 80009ee:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80009f0:	f04f 32ff 	mov.w	r2, #4294967295
 80009f4:	69bb      	ldr	r3, [r7, #24]
 80009f6:	fa02 f303 	lsl.w	r3, r2, r3
 80009fa:	43da      	mvns	r2, r3
 80009fc:	68bb      	ldr	r3, [r7, #8]
 80009fe:	401a      	ands	r2, r3
 8000a00:	697b      	ldr	r3, [r7, #20]
 8000a02:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000a04:	f04f 31ff 	mov.w	r1, #4294967295
 8000a08:	697b      	ldr	r3, [r7, #20]
 8000a0a:	fa01 f303 	lsl.w	r3, r1, r3
 8000a0e:	43d9      	mvns	r1, r3
 8000a10:	687b      	ldr	r3, [r7, #4]
 8000a12:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000a14:	4313      	orrs	r3, r2
         );
}
 8000a16:	4618      	mov	r0, r3
 8000a18:	3724      	adds	r7, #36	; 0x24
 8000a1a:	46bd      	mov	sp, r7
 8000a1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a20:	4770      	bx	lr
	...

08000a24 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000a24:	b580      	push	{r7, lr}
 8000a26:	b082      	sub	sp, #8
 8000a28:	af00      	add	r7, sp, #0
 8000a2a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000a2c:	687b      	ldr	r3, [r7, #4]
 8000a2e:	3b01      	subs	r3, #1
 8000a30:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000a34:	d301      	bcc.n	8000a3a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000a36:	2301      	movs	r3, #1
 8000a38:	e00f      	b.n	8000a5a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000a3a:	4a0a      	ldr	r2, [pc, #40]	; (8000a64 <SysTick_Config+0x40>)
 8000a3c:	687b      	ldr	r3, [r7, #4]
 8000a3e:	3b01      	subs	r3, #1
 8000a40:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000a42:	210f      	movs	r1, #15
 8000a44:	f04f 30ff 	mov.w	r0, #4294967295
 8000a48:	f7ff ff8e 	bl	8000968 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000a4c:	4b05      	ldr	r3, [pc, #20]	; (8000a64 <SysTick_Config+0x40>)
 8000a4e:	2200      	movs	r2, #0
 8000a50:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000a52:	4b04      	ldr	r3, [pc, #16]	; (8000a64 <SysTick_Config+0x40>)
 8000a54:	2207      	movs	r2, #7
 8000a56:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000a58:	2300      	movs	r3, #0
}
 8000a5a:	4618      	mov	r0, r3
 8000a5c:	3708      	adds	r7, #8
 8000a5e:	46bd      	mov	sp, r7
 8000a60:	bd80      	pop	{r7, pc}
 8000a62:	bf00      	nop
 8000a64:	e000e010 	.word	0xe000e010

08000a68 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000a68:	b580      	push	{r7, lr}
 8000a6a:	b082      	sub	sp, #8
 8000a6c:	af00      	add	r7, sp, #0
 8000a6e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000a70:	6878      	ldr	r0, [r7, #4]
 8000a72:	f7ff ff29 	bl	80008c8 <__NVIC_SetPriorityGrouping>
}
 8000a76:	bf00      	nop
 8000a78:	3708      	adds	r7, #8
 8000a7a:	46bd      	mov	sp, r7
 8000a7c:	bd80      	pop	{r7, pc}

08000a7e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000a7e:	b580      	push	{r7, lr}
 8000a80:	b086      	sub	sp, #24
 8000a82:	af00      	add	r7, sp, #0
 8000a84:	4603      	mov	r3, r0
 8000a86:	60b9      	str	r1, [r7, #8]
 8000a88:	607a      	str	r2, [r7, #4]
 8000a8a:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000a8c:	f7ff ff40 	bl	8000910 <__NVIC_GetPriorityGrouping>
 8000a90:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000a92:	687a      	ldr	r2, [r7, #4]
 8000a94:	68b9      	ldr	r1, [r7, #8]
 8000a96:	6978      	ldr	r0, [r7, #20]
 8000a98:	f7ff ff90 	bl	80009bc <NVIC_EncodePriority>
 8000a9c:	4602      	mov	r2, r0
 8000a9e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000aa2:	4611      	mov	r1, r2
 8000aa4:	4618      	mov	r0, r3
 8000aa6:	f7ff ff5f 	bl	8000968 <__NVIC_SetPriority>
}
 8000aaa:	bf00      	nop
 8000aac:	3718      	adds	r7, #24
 8000aae:	46bd      	mov	sp, r7
 8000ab0:	bd80      	pop	{r7, pc}

08000ab2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000ab2:	b580      	push	{r7, lr}
 8000ab4:	b082      	sub	sp, #8
 8000ab6:	af00      	add	r7, sp, #0
 8000ab8:	4603      	mov	r3, r0
 8000aba:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000abc:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000ac0:	4618      	mov	r0, r3
 8000ac2:	f7ff ff33 	bl	800092c <__NVIC_EnableIRQ>
}
 8000ac6:	bf00      	nop
 8000ac8:	3708      	adds	r7, #8
 8000aca:	46bd      	mov	sp, r7
 8000acc:	bd80      	pop	{r7, pc}

08000ace <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000ace:	b580      	push	{r7, lr}
 8000ad0:	b082      	sub	sp, #8
 8000ad2:	af00      	add	r7, sp, #0
 8000ad4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000ad6:	6878      	ldr	r0, [r7, #4]
 8000ad8:	f7ff ffa4 	bl	8000a24 <SysTick_Config>
 8000adc:	4603      	mov	r3, r0
}
 8000ade:	4618      	mov	r0, r3
 8000ae0:	3708      	adds	r7, #8
 8000ae2:	46bd      	mov	sp, r7
 8000ae4:	bd80      	pop	{r7, pc}
	...

08000ae8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000ae8:	b480      	push	{r7}
 8000aea:	b089      	sub	sp, #36	; 0x24
 8000aec:	af00      	add	r7, sp, #0
 8000aee:	6078      	str	r0, [r7, #4]
 8000af0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8000af2:	2300      	movs	r3, #0
 8000af4:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8000af6:	4b89      	ldr	r3, [pc, #548]	; (8000d1c <HAL_GPIO_Init+0x234>)
 8000af8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8000afa:	e194      	b.n	8000e26 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8000afc:	683b      	ldr	r3, [r7, #0]
 8000afe:	681a      	ldr	r2, [r3, #0]
 8000b00:	2101      	movs	r1, #1
 8000b02:	69fb      	ldr	r3, [r7, #28]
 8000b04:	fa01 f303 	lsl.w	r3, r1, r3
 8000b08:	4013      	ands	r3, r2
 8000b0a:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8000b0c:	693b      	ldr	r3, [r7, #16]
 8000b0e:	2b00      	cmp	r3, #0
 8000b10:	f000 8186 	beq.w	8000e20 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000b14:	683b      	ldr	r3, [r7, #0]
 8000b16:	685b      	ldr	r3, [r3, #4]
 8000b18:	2b02      	cmp	r3, #2
 8000b1a:	d003      	beq.n	8000b24 <HAL_GPIO_Init+0x3c>
 8000b1c:	683b      	ldr	r3, [r7, #0]
 8000b1e:	685b      	ldr	r3, [r3, #4]
 8000b20:	2b12      	cmp	r3, #18
 8000b22:	d123      	bne.n	8000b6c <HAL_GPIO_Init+0x84>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000b24:	69fb      	ldr	r3, [r7, #28]
 8000b26:	08da      	lsrs	r2, r3, #3
 8000b28:	687b      	ldr	r3, [r7, #4]
 8000b2a:	3208      	adds	r2, #8
 8000b2c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000b30:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8000b32:	69fb      	ldr	r3, [r7, #28]
 8000b34:	f003 0307 	and.w	r3, r3, #7
 8000b38:	009b      	lsls	r3, r3, #2
 8000b3a:	220f      	movs	r2, #15
 8000b3c:	fa02 f303 	lsl.w	r3, r2, r3
 8000b40:	43db      	mvns	r3, r3
 8000b42:	69ba      	ldr	r2, [r7, #24]
 8000b44:	4013      	ands	r3, r2
 8000b46:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8000b48:	683b      	ldr	r3, [r7, #0]
 8000b4a:	691a      	ldr	r2, [r3, #16]
 8000b4c:	69fb      	ldr	r3, [r7, #28]
 8000b4e:	f003 0307 	and.w	r3, r3, #7
 8000b52:	009b      	lsls	r3, r3, #2
 8000b54:	fa02 f303 	lsl.w	r3, r2, r3
 8000b58:	69ba      	ldr	r2, [r7, #24]
 8000b5a:	4313      	orrs	r3, r2
 8000b5c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000b5e:	69fb      	ldr	r3, [r7, #28]
 8000b60:	08da      	lsrs	r2, r3, #3
 8000b62:	687b      	ldr	r3, [r7, #4]
 8000b64:	3208      	adds	r2, #8
 8000b66:	69b9      	ldr	r1, [r7, #24]
 8000b68:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000b6c:	687b      	ldr	r3, [r7, #4]
 8000b6e:	681b      	ldr	r3, [r3, #0]
 8000b70:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8000b72:	69fb      	ldr	r3, [r7, #28]
 8000b74:	005b      	lsls	r3, r3, #1
 8000b76:	2203      	movs	r2, #3
 8000b78:	fa02 f303 	lsl.w	r3, r2, r3
 8000b7c:	43db      	mvns	r3, r3
 8000b7e:	69ba      	ldr	r2, [r7, #24]
 8000b80:	4013      	ands	r3, r2
 8000b82:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000b84:	683b      	ldr	r3, [r7, #0]
 8000b86:	685b      	ldr	r3, [r3, #4]
 8000b88:	f003 0203 	and.w	r2, r3, #3
 8000b8c:	69fb      	ldr	r3, [r7, #28]
 8000b8e:	005b      	lsls	r3, r3, #1
 8000b90:	fa02 f303 	lsl.w	r3, r2, r3
 8000b94:	69ba      	ldr	r2, [r7, #24]
 8000b96:	4313      	orrs	r3, r2
 8000b98:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000b9a:	687b      	ldr	r3, [r7, #4]
 8000b9c:	69ba      	ldr	r2, [r7, #24]
 8000b9e:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000ba0:	683b      	ldr	r3, [r7, #0]
 8000ba2:	685b      	ldr	r3, [r3, #4]
 8000ba4:	2b01      	cmp	r3, #1
 8000ba6:	d00b      	beq.n	8000bc0 <HAL_GPIO_Init+0xd8>
 8000ba8:	683b      	ldr	r3, [r7, #0]
 8000baa:	685b      	ldr	r3, [r3, #4]
 8000bac:	2b02      	cmp	r3, #2
 8000bae:	d007      	beq.n	8000bc0 <HAL_GPIO_Init+0xd8>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000bb0:	683b      	ldr	r3, [r7, #0]
 8000bb2:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000bb4:	2b11      	cmp	r3, #17
 8000bb6:	d003      	beq.n	8000bc0 <HAL_GPIO_Init+0xd8>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000bb8:	683b      	ldr	r3, [r7, #0]
 8000bba:	685b      	ldr	r3, [r3, #4]
 8000bbc:	2b12      	cmp	r3, #18
 8000bbe:	d130      	bne.n	8000c22 <HAL_GPIO_Init+0x13a>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000bc0:	687b      	ldr	r3, [r7, #4]
 8000bc2:	689b      	ldr	r3, [r3, #8]
 8000bc4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8000bc6:	69fb      	ldr	r3, [r7, #28]
 8000bc8:	005b      	lsls	r3, r3, #1
 8000bca:	2203      	movs	r2, #3
 8000bcc:	fa02 f303 	lsl.w	r3, r2, r3
 8000bd0:	43db      	mvns	r3, r3
 8000bd2:	69ba      	ldr	r2, [r7, #24]
 8000bd4:	4013      	ands	r3, r2
 8000bd6:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000bd8:	683b      	ldr	r3, [r7, #0]
 8000bda:	68da      	ldr	r2, [r3, #12]
 8000bdc:	69fb      	ldr	r3, [r7, #28]
 8000bde:	005b      	lsls	r3, r3, #1
 8000be0:	fa02 f303 	lsl.w	r3, r2, r3
 8000be4:	69ba      	ldr	r2, [r7, #24]
 8000be6:	4313      	orrs	r3, r2
 8000be8:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000bea:	687b      	ldr	r3, [r7, #4]
 8000bec:	69ba      	ldr	r2, [r7, #24]
 8000bee:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000bf0:	687b      	ldr	r3, [r7, #4]
 8000bf2:	685b      	ldr	r3, [r3, #4]
 8000bf4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000bf6:	2201      	movs	r2, #1
 8000bf8:	69fb      	ldr	r3, [r7, #28]
 8000bfa:	fa02 f303 	lsl.w	r3, r2, r3
 8000bfe:	43db      	mvns	r3, r3
 8000c00:	69ba      	ldr	r2, [r7, #24]
 8000c02:	4013      	ands	r3, r2
 8000c04:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8000c06:	683b      	ldr	r3, [r7, #0]
 8000c08:	685b      	ldr	r3, [r3, #4]
 8000c0a:	091b      	lsrs	r3, r3, #4
 8000c0c:	f003 0201 	and.w	r2, r3, #1
 8000c10:	69fb      	ldr	r3, [r7, #28]
 8000c12:	fa02 f303 	lsl.w	r3, r2, r3
 8000c16:	69ba      	ldr	r2, [r7, #24]
 8000c18:	4313      	orrs	r3, r2
 8000c1a:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000c1c:	687b      	ldr	r3, [r7, #4]
 8000c1e:	69ba      	ldr	r2, [r7, #24]
 8000c20:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8000c22:	687b      	ldr	r3, [r7, #4]
 8000c24:	68db      	ldr	r3, [r3, #12]
 8000c26:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8000c28:	69fb      	ldr	r3, [r7, #28]
 8000c2a:	005b      	lsls	r3, r3, #1
 8000c2c:	2203      	movs	r2, #3
 8000c2e:	fa02 f303 	lsl.w	r3, r2, r3
 8000c32:	43db      	mvns	r3, r3
 8000c34:	69ba      	ldr	r2, [r7, #24]
 8000c36:	4013      	ands	r3, r2
 8000c38:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000c3a:	683b      	ldr	r3, [r7, #0]
 8000c3c:	689a      	ldr	r2, [r3, #8]
 8000c3e:	69fb      	ldr	r3, [r7, #28]
 8000c40:	005b      	lsls	r3, r3, #1
 8000c42:	fa02 f303 	lsl.w	r3, r2, r3
 8000c46:	69ba      	ldr	r2, [r7, #24]
 8000c48:	4313      	orrs	r3, r2
 8000c4a:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8000c4c:	687b      	ldr	r3, [r7, #4]
 8000c4e:	69ba      	ldr	r2, [r7, #24]
 8000c50:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000c52:	683b      	ldr	r3, [r7, #0]
 8000c54:	685b      	ldr	r3, [r3, #4]
 8000c56:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000c5a:	2b00      	cmp	r3, #0
 8000c5c:	f000 80e0 	beq.w	8000e20 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c60:	4b2f      	ldr	r3, [pc, #188]	; (8000d20 <HAL_GPIO_Init+0x238>)
 8000c62:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000c66:	4a2e      	ldr	r2, [pc, #184]	; (8000d20 <HAL_GPIO_Init+0x238>)
 8000c68:	f043 0302 	orr.w	r3, r3, #2
 8000c6c:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8000c70:	4b2b      	ldr	r3, [pc, #172]	; (8000d20 <HAL_GPIO_Init+0x238>)
 8000c72:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000c76:	f003 0302 	and.w	r3, r3, #2
 8000c7a:	60fb      	str	r3, [r7, #12]
 8000c7c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000c7e:	4a29      	ldr	r2, [pc, #164]	; (8000d24 <HAL_GPIO_Init+0x23c>)
 8000c80:	69fb      	ldr	r3, [r7, #28]
 8000c82:	089b      	lsrs	r3, r3, #2
 8000c84:	3302      	adds	r3, #2
 8000c86:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000c8a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8000c8c:	69fb      	ldr	r3, [r7, #28]
 8000c8e:	f003 0303 	and.w	r3, r3, #3
 8000c92:	009b      	lsls	r3, r3, #2
 8000c94:	220f      	movs	r2, #15
 8000c96:	fa02 f303 	lsl.w	r3, r2, r3
 8000c9a:	43db      	mvns	r3, r3
 8000c9c:	69ba      	ldr	r2, [r7, #24]
 8000c9e:	4013      	ands	r3, r2
 8000ca0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8000ca2:	687b      	ldr	r3, [r7, #4]
 8000ca4:	4a20      	ldr	r2, [pc, #128]	; (8000d28 <HAL_GPIO_Init+0x240>)
 8000ca6:	4293      	cmp	r3, r2
 8000ca8:	d052      	beq.n	8000d50 <HAL_GPIO_Init+0x268>
 8000caa:	687b      	ldr	r3, [r7, #4]
 8000cac:	4a1f      	ldr	r2, [pc, #124]	; (8000d2c <HAL_GPIO_Init+0x244>)
 8000cae:	4293      	cmp	r3, r2
 8000cb0:	d031      	beq.n	8000d16 <HAL_GPIO_Init+0x22e>
 8000cb2:	687b      	ldr	r3, [r7, #4]
 8000cb4:	4a1e      	ldr	r2, [pc, #120]	; (8000d30 <HAL_GPIO_Init+0x248>)
 8000cb6:	4293      	cmp	r3, r2
 8000cb8:	d02b      	beq.n	8000d12 <HAL_GPIO_Init+0x22a>
 8000cba:	687b      	ldr	r3, [r7, #4]
 8000cbc:	4a1d      	ldr	r2, [pc, #116]	; (8000d34 <HAL_GPIO_Init+0x24c>)
 8000cbe:	4293      	cmp	r3, r2
 8000cc0:	d025      	beq.n	8000d0e <HAL_GPIO_Init+0x226>
 8000cc2:	687b      	ldr	r3, [r7, #4]
 8000cc4:	4a1c      	ldr	r2, [pc, #112]	; (8000d38 <HAL_GPIO_Init+0x250>)
 8000cc6:	4293      	cmp	r3, r2
 8000cc8:	d01f      	beq.n	8000d0a <HAL_GPIO_Init+0x222>
 8000cca:	687b      	ldr	r3, [r7, #4]
 8000ccc:	4a1b      	ldr	r2, [pc, #108]	; (8000d3c <HAL_GPIO_Init+0x254>)
 8000cce:	4293      	cmp	r3, r2
 8000cd0:	d019      	beq.n	8000d06 <HAL_GPIO_Init+0x21e>
 8000cd2:	687b      	ldr	r3, [r7, #4]
 8000cd4:	4a1a      	ldr	r2, [pc, #104]	; (8000d40 <HAL_GPIO_Init+0x258>)
 8000cd6:	4293      	cmp	r3, r2
 8000cd8:	d013      	beq.n	8000d02 <HAL_GPIO_Init+0x21a>
 8000cda:	687b      	ldr	r3, [r7, #4]
 8000cdc:	4a19      	ldr	r2, [pc, #100]	; (8000d44 <HAL_GPIO_Init+0x25c>)
 8000cde:	4293      	cmp	r3, r2
 8000ce0:	d00d      	beq.n	8000cfe <HAL_GPIO_Init+0x216>
 8000ce2:	687b      	ldr	r3, [r7, #4]
 8000ce4:	4a18      	ldr	r2, [pc, #96]	; (8000d48 <HAL_GPIO_Init+0x260>)
 8000ce6:	4293      	cmp	r3, r2
 8000ce8:	d007      	beq.n	8000cfa <HAL_GPIO_Init+0x212>
 8000cea:	687b      	ldr	r3, [r7, #4]
 8000cec:	4a17      	ldr	r2, [pc, #92]	; (8000d4c <HAL_GPIO_Init+0x264>)
 8000cee:	4293      	cmp	r3, r2
 8000cf0:	d101      	bne.n	8000cf6 <HAL_GPIO_Init+0x20e>
 8000cf2:	2309      	movs	r3, #9
 8000cf4:	e02d      	b.n	8000d52 <HAL_GPIO_Init+0x26a>
 8000cf6:	230a      	movs	r3, #10
 8000cf8:	e02b      	b.n	8000d52 <HAL_GPIO_Init+0x26a>
 8000cfa:	2308      	movs	r3, #8
 8000cfc:	e029      	b.n	8000d52 <HAL_GPIO_Init+0x26a>
 8000cfe:	2307      	movs	r3, #7
 8000d00:	e027      	b.n	8000d52 <HAL_GPIO_Init+0x26a>
 8000d02:	2306      	movs	r3, #6
 8000d04:	e025      	b.n	8000d52 <HAL_GPIO_Init+0x26a>
 8000d06:	2305      	movs	r3, #5
 8000d08:	e023      	b.n	8000d52 <HAL_GPIO_Init+0x26a>
 8000d0a:	2304      	movs	r3, #4
 8000d0c:	e021      	b.n	8000d52 <HAL_GPIO_Init+0x26a>
 8000d0e:	2303      	movs	r3, #3
 8000d10:	e01f      	b.n	8000d52 <HAL_GPIO_Init+0x26a>
 8000d12:	2302      	movs	r3, #2
 8000d14:	e01d      	b.n	8000d52 <HAL_GPIO_Init+0x26a>
 8000d16:	2301      	movs	r3, #1
 8000d18:	e01b      	b.n	8000d52 <HAL_GPIO_Init+0x26a>
 8000d1a:	bf00      	nop
 8000d1c:	58000080 	.word	0x58000080
 8000d20:	58024400 	.word	0x58024400
 8000d24:	58000400 	.word	0x58000400
 8000d28:	58020000 	.word	0x58020000
 8000d2c:	58020400 	.word	0x58020400
 8000d30:	58020800 	.word	0x58020800
 8000d34:	58020c00 	.word	0x58020c00
 8000d38:	58021000 	.word	0x58021000
 8000d3c:	58021400 	.word	0x58021400
 8000d40:	58021800 	.word	0x58021800
 8000d44:	58021c00 	.word	0x58021c00
 8000d48:	58022000 	.word	0x58022000
 8000d4c:	58022400 	.word	0x58022400
 8000d50:	2300      	movs	r3, #0
 8000d52:	69fa      	ldr	r2, [r7, #28]
 8000d54:	f002 0203 	and.w	r2, r2, #3
 8000d58:	0092      	lsls	r2, r2, #2
 8000d5a:	4093      	lsls	r3, r2
 8000d5c:	69ba      	ldr	r2, [r7, #24]
 8000d5e:	4313      	orrs	r3, r2
 8000d60:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000d62:	4938      	ldr	r1, [pc, #224]	; (8000e44 <HAL_GPIO_Init+0x35c>)
 8000d64:	69fb      	ldr	r3, [r7, #28]
 8000d66:	089b      	lsrs	r3, r3, #2
 8000d68:	3302      	adds	r3, #2
 8000d6a:	69ba      	ldr	r2, [r7, #24]
 8000d6c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8000d70:	697b      	ldr	r3, [r7, #20]
 8000d72:	681b      	ldr	r3, [r3, #0]
 8000d74:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8000d76:	693b      	ldr	r3, [r7, #16]
 8000d78:	43db      	mvns	r3, r3
 8000d7a:	69ba      	ldr	r2, [r7, #24]
 8000d7c:	4013      	ands	r3, r2
 8000d7e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000d80:	683b      	ldr	r3, [r7, #0]
 8000d82:	685b      	ldr	r3, [r3, #4]
 8000d84:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000d88:	2b00      	cmp	r3, #0
 8000d8a:	d003      	beq.n	8000d94 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8000d8c:	69ba      	ldr	r2, [r7, #24]
 8000d8e:	693b      	ldr	r3, [r7, #16]
 8000d90:	4313      	orrs	r3, r2
 8000d92:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8000d94:	697b      	ldr	r3, [r7, #20]
 8000d96:	69ba      	ldr	r2, [r7, #24]
 8000d98:	601a      	str	r2, [r3, #0]

        temp = EXTI_CurrentCPU->EMR1;
 8000d9a:	697b      	ldr	r3, [r7, #20]
 8000d9c:	685b      	ldr	r3, [r3, #4]
 8000d9e:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8000da0:	693b      	ldr	r3, [r7, #16]
 8000da2:	43db      	mvns	r3, r3
 8000da4:	69ba      	ldr	r2, [r7, #24]
 8000da6:	4013      	ands	r3, r2
 8000da8:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000daa:	683b      	ldr	r3, [r7, #0]
 8000dac:	685b      	ldr	r3, [r3, #4]
 8000dae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000db2:	2b00      	cmp	r3, #0
 8000db4:	d003      	beq.n	8000dbe <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8000db6:	69ba      	ldr	r2, [r7, #24]
 8000db8:	693b      	ldr	r3, [r7, #16]
 8000dba:	4313      	orrs	r3, r2
 8000dbc:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8000dbe:	697b      	ldr	r3, [r7, #20]
 8000dc0:	69ba      	ldr	r2, [r7, #24]
 8000dc2:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8000dc4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000dc8:	681b      	ldr	r3, [r3, #0]
 8000dca:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8000dcc:	693b      	ldr	r3, [r7, #16]
 8000dce:	43db      	mvns	r3, r3
 8000dd0:	69ba      	ldr	r2, [r7, #24]
 8000dd2:	4013      	ands	r3, r2
 8000dd4:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000dd6:	683b      	ldr	r3, [r7, #0]
 8000dd8:	685b      	ldr	r3, [r3, #4]
 8000dda:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000dde:	2b00      	cmp	r3, #0
 8000de0:	d003      	beq.n	8000dea <HAL_GPIO_Init+0x302>
        {
          temp |= iocurrent;
 8000de2:	69ba      	ldr	r2, [r7, #24]
 8000de4:	693b      	ldr	r3, [r7, #16]
 8000de6:	4313      	orrs	r3, r2
 8000de8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8000dea:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8000dee:	69bb      	ldr	r3, [r7, #24]
 8000df0:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8000df2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000df6:	685b      	ldr	r3, [r3, #4]
 8000df8:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8000dfa:	693b      	ldr	r3, [r7, #16]
 8000dfc:	43db      	mvns	r3, r3
 8000dfe:	69ba      	ldr	r2, [r7, #24]
 8000e00:	4013      	ands	r3, r2
 8000e02:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000e04:	683b      	ldr	r3, [r7, #0]
 8000e06:	685b      	ldr	r3, [r3, #4]
 8000e08:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000e0c:	2b00      	cmp	r3, #0
 8000e0e:	d003      	beq.n	8000e18 <HAL_GPIO_Init+0x330>
        {
          temp |= iocurrent;
 8000e10:	69ba      	ldr	r2, [r7, #24]
 8000e12:	693b      	ldr	r3, [r7, #16]
 8000e14:	4313      	orrs	r3, r2
 8000e16:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8000e18:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8000e1c:	69bb      	ldr	r3, [r7, #24]
 8000e1e:	6053      	str	r3, [r2, #4]
      }
    }

    position++;
 8000e20:	69fb      	ldr	r3, [r7, #28]
 8000e22:	3301      	adds	r3, #1
 8000e24:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8000e26:	683b      	ldr	r3, [r7, #0]
 8000e28:	681a      	ldr	r2, [r3, #0]
 8000e2a:	69fb      	ldr	r3, [r7, #28]
 8000e2c:	fa22 f303 	lsr.w	r3, r2, r3
 8000e30:	2b00      	cmp	r3, #0
 8000e32:	f47f ae63 	bne.w	8000afc <HAL_GPIO_Init+0x14>
  }
}
 8000e36:	bf00      	nop
 8000e38:	bf00      	nop
 8000e3a:	3724      	adds	r7, #36	; 0x24
 8000e3c:	46bd      	mov	sp, r7
 8000e3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e42:	4770      	bx	lr
 8000e44:	58000400 	.word	0x58000400

08000e48 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8000e48:	b580      	push	{r7, lr}
 8000e4a:	b082      	sub	sp, #8
 8000e4c:	af00      	add	r7, sp, #0
 8000e4e:	4603      	mov	r3, r0
 8000e50:	80fb      	strh	r3, [r7, #6]
    __HAL_GPIO_EXTID2_CLEAR_IT(GPIO_Pin);
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
  }
#else
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00U)
 8000e52:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000e56:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8000e5a:	88fb      	ldrh	r3, [r7, #6]
 8000e5c:	4013      	ands	r3, r2
 8000e5e:	2b00      	cmp	r3, #0
 8000e60:	d008      	beq.n	8000e74 <HAL_GPIO_EXTI_IRQHandler+0x2c>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8000e62:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8000e66:	88fb      	ldrh	r3, [r7, #6]
 8000e68:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8000e6c:	88fb      	ldrh	r3, [r7, #6]
 8000e6e:	4618      	mov	r0, r3
 8000e70:	f7ff fb6c 	bl	800054c <HAL_GPIO_EXTI_Callback>
  }
#endif
}
 8000e74:	bf00      	nop
 8000e76:	3708      	adds	r7, #8
 8000e78:	46bd      	mov	sp, r7
 8000e7a:	bd80      	pop	{r7, pc}

08000e7c <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8000e7c:	b580      	push	{r7, lr}
 8000e7e:	b084      	sub	sp, #16
 8000e80:	af00      	add	r7, sp, #0
 8000e82:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8000e84:	4b19      	ldr	r3, [pc, #100]	; (8000eec <HAL_PWREx_ConfigSupply+0x70>)
 8000e86:	68db      	ldr	r3, [r3, #12]
 8000e88:	f003 0304 	and.w	r3, r3, #4
 8000e8c:	2b04      	cmp	r3, #4
 8000e8e:	d00a      	beq.n	8000ea6 <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8000e90:	4b16      	ldr	r3, [pc, #88]	; (8000eec <HAL_PWREx_ConfigSupply+0x70>)
 8000e92:	68db      	ldr	r3, [r3, #12]
 8000e94:	f003 0307 	and.w	r3, r3, #7
 8000e98:	687a      	ldr	r2, [r7, #4]
 8000e9a:	429a      	cmp	r2, r3
 8000e9c:	d001      	beq.n	8000ea2 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8000e9e:	2301      	movs	r3, #1
 8000ea0:	e01f      	b.n	8000ee2 <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8000ea2:	2300      	movs	r3, #0
 8000ea4:	e01d      	b.n	8000ee2 <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8000ea6:	4b11      	ldr	r3, [pc, #68]	; (8000eec <HAL_PWREx_ConfigSupply+0x70>)
 8000ea8:	68db      	ldr	r3, [r3, #12]
 8000eaa:	f023 0207 	bic.w	r2, r3, #7
 8000eae:	490f      	ldr	r1, [pc, #60]	; (8000eec <HAL_PWREx_ConfigSupply+0x70>)
 8000eb0:	687b      	ldr	r3, [r7, #4]
 8000eb2:	4313      	orrs	r3, r2
 8000eb4:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8000eb6:	f7ff fcbb 	bl	8000830 <HAL_GetTick>
 8000eba:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8000ebc:	e009      	b.n	8000ed2 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8000ebe:	f7ff fcb7 	bl	8000830 <HAL_GetTick>
 8000ec2:	4602      	mov	r2, r0
 8000ec4:	68fb      	ldr	r3, [r7, #12]
 8000ec6:	1ad3      	subs	r3, r2, r3
 8000ec8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8000ecc:	d901      	bls.n	8000ed2 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8000ece:	2301      	movs	r3, #1
 8000ed0:	e007      	b.n	8000ee2 <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8000ed2:	4b06      	ldr	r3, [pc, #24]	; (8000eec <HAL_PWREx_ConfigSupply+0x70>)
 8000ed4:	685b      	ldr	r3, [r3, #4]
 8000ed6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000eda:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000ede:	d1ee      	bne.n	8000ebe <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8000ee0:	2300      	movs	r3, #0
}
 8000ee2:	4618      	mov	r0, r3
 8000ee4:	3710      	adds	r7, #16
 8000ee6:	46bd      	mov	sp, r7
 8000ee8:	bd80      	pop	{r7, pc}
 8000eea:	bf00      	nop
 8000eec:	58024800 	.word	0x58024800

08000ef0 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000ef0:	b580      	push	{r7, lr}
 8000ef2:	b08c      	sub	sp, #48	; 0x30
 8000ef4:	af00      	add	r7, sp, #0
 8000ef6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8000ef8:	687b      	ldr	r3, [r7, #4]
 8000efa:	2b00      	cmp	r3, #0
 8000efc:	d101      	bne.n	8000f02 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000efe:	2301      	movs	r3, #1
 8000f00:	e3cf      	b.n	80016a2 <HAL_RCC_OscConfig+0x7b2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000f02:	687b      	ldr	r3, [r7, #4]
 8000f04:	681b      	ldr	r3, [r3, #0]
 8000f06:	f003 0301 	and.w	r3, r3, #1
 8000f0a:	2b00      	cmp	r3, #0
 8000f0c:	f000 808b 	beq.w	8001026 <HAL_RCC_OscConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8000f10:	4b8e      	ldr	r3, [pc, #568]	; (800114c <HAL_RCC_OscConfig+0x25c>)
 8000f12:	691b      	ldr	r3, [r3, #16]
 8000f14:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8000f18:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8000f1a:	4b8c      	ldr	r3, [pc, #560]	; (800114c <HAL_RCC_OscConfig+0x25c>)
 8000f1c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000f1e:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8000f20:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000f22:	2b10      	cmp	r3, #16
 8000f24:	d007      	beq.n	8000f36 <HAL_RCC_OscConfig+0x46>
 8000f26:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000f28:	2b18      	cmp	r3, #24
 8000f2a:	d110      	bne.n	8000f4e <HAL_RCC_OscConfig+0x5e>
 8000f2c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000f2e:	f003 0303 	and.w	r3, r3, #3
 8000f32:	2b02      	cmp	r3, #2
 8000f34:	d10b      	bne.n	8000f4e <HAL_RCC_OscConfig+0x5e>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000f36:	4b85      	ldr	r3, [pc, #532]	; (800114c <HAL_RCC_OscConfig+0x25c>)
 8000f38:	681b      	ldr	r3, [r3, #0]
 8000f3a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000f3e:	2b00      	cmp	r3, #0
 8000f40:	d070      	beq.n	8001024 <HAL_RCC_OscConfig+0x134>
 8000f42:	687b      	ldr	r3, [r7, #4]
 8000f44:	685b      	ldr	r3, [r3, #4]
 8000f46:	2b00      	cmp	r3, #0
 8000f48:	d16c      	bne.n	8001024 <HAL_RCC_OscConfig+0x134>
      {
        return HAL_ERROR;
 8000f4a:	2301      	movs	r3, #1
 8000f4c:	e3a9      	b.n	80016a2 <HAL_RCC_OscConfig+0x7b2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000f4e:	687b      	ldr	r3, [r7, #4]
 8000f50:	685b      	ldr	r3, [r3, #4]
 8000f52:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000f56:	d106      	bne.n	8000f66 <HAL_RCC_OscConfig+0x76>
 8000f58:	4b7c      	ldr	r3, [pc, #496]	; (800114c <HAL_RCC_OscConfig+0x25c>)
 8000f5a:	681b      	ldr	r3, [r3, #0]
 8000f5c:	4a7b      	ldr	r2, [pc, #492]	; (800114c <HAL_RCC_OscConfig+0x25c>)
 8000f5e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000f62:	6013      	str	r3, [r2, #0]
 8000f64:	e02e      	b.n	8000fc4 <HAL_RCC_OscConfig+0xd4>
 8000f66:	687b      	ldr	r3, [r7, #4]
 8000f68:	685b      	ldr	r3, [r3, #4]
 8000f6a:	2b00      	cmp	r3, #0
 8000f6c:	d10c      	bne.n	8000f88 <HAL_RCC_OscConfig+0x98>
 8000f6e:	4b77      	ldr	r3, [pc, #476]	; (800114c <HAL_RCC_OscConfig+0x25c>)
 8000f70:	681b      	ldr	r3, [r3, #0]
 8000f72:	4a76      	ldr	r2, [pc, #472]	; (800114c <HAL_RCC_OscConfig+0x25c>)
 8000f74:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000f78:	6013      	str	r3, [r2, #0]
 8000f7a:	4b74      	ldr	r3, [pc, #464]	; (800114c <HAL_RCC_OscConfig+0x25c>)
 8000f7c:	681b      	ldr	r3, [r3, #0]
 8000f7e:	4a73      	ldr	r2, [pc, #460]	; (800114c <HAL_RCC_OscConfig+0x25c>)
 8000f80:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000f84:	6013      	str	r3, [r2, #0]
 8000f86:	e01d      	b.n	8000fc4 <HAL_RCC_OscConfig+0xd4>
 8000f88:	687b      	ldr	r3, [r7, #4]
 8000f8a:	685b      	ldr	r3, [r3, #4]
 8000f8c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000f90:	d10c      	bne.n	8000fac <HAL_RCC_OscConfig+0xbc>
 8000f92:	4b6e      	ldr	r3, [pc, #440]	; (800114c <HAL_RCC_OscConfig+0x25c>)
 8000f94:	681b      	ldr	r3, [r3, #0]
 8000f96:	4a6d      	ldr	r2, [pc, #436]	; (800114c <HAL_RCC_OscConfig+0x25c>)
 8000f98:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000f9c:	6013      	str	r3, [r2, #0]
 8000f9e:	4b6b      	ldr	r3, [pc, #428]	; (800114c <HAL_RCC_OscConfig+0x25c>)
 8000fa0:	681b      	ldr	r3, [r3, #0]
 8000fa2:	4a6a      	ldr	r2, [pc, #424]	; (800114c <HAL_RCC_OscConfig+0x25c>)
 8000fa4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000fa8:	6013      	str	r3, [r2, #0]
 8000faa:	e00b      	b.n	8000fc4 <HAL_RCC_OscConfig+0xd4>
 8000fac:	4b67      	ldr	r3, [pc, #412]	; (800114c <HAL_RCC_OscConfig+0x25c>)
 8000fae:	681b      	ldr	r3, [r3, #0]
 8000fb0:	4a66      	ldr	r2, [pc, #408]	; (800114c <HAL_RCC_OscConfig+0x25c>)
 8000fb2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000fb6:	6013      	str	r3, [r2, #0]
 8000fb8:	4b64      	ldr	r3, [pc, #400]	; (800114c <HAL_RCC_OscConfig+0x25c>)
 8000fba:	681b      	ldr	r3, [r3, #0]
 8000fbc:	4a63      	ldr	r2, [pc, #396]	; (800114c <HAL_RCC_OscConfig+0x25c>)
 8000fbe:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000fc2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000fc4:	687b      	ldr	r3, [r7, #4]
 8000fc6:	685b      	ldr	r3, [r3, #4]
 8000fc8:	2b00      	cmp	r3, #0
 8000fca:	d015      	beq.n	8000ff8 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000fcc:	f7ff fc30 	bl	8000830 <HAL_GetTick>
 8000fd0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8000fd2:	e00a      	b.n	8000fea <HAL_RCC_OscConfig+0xfa>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000fd4:	f7ff fc2c 	bl	8000830 <HAL_GetTick>
 8000fd8:	4602      	mov	r2, r0
 8000fda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000fdc:	1ad3      	subs	r3, r2, r3
 8000fde:	f241 3288 	movw	r2, #5000	; 0x1388
 8000fe2:	4293      	cmp	r3, r2
 8000fe4:	d901      	bls.n	8000fea <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8000fe6:	2303      	movs	r3, #3
 8000fe8:	e35b      	b.n	80016a2 <HAL_RCC_OscConfig+0x7b2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8000fea:	4b58      	ldr	r3, [pc, #352]	; (800114c <HAL_RCC_OscConfig+0x25c>)
 8000fec:	681b      	ldr	r3, [r3, #0]
 8000fee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000ff2:	2b00      	cmp	r3, #0
 8000ff4:	d0ee      	beq.n	8000fd4 <HAL_RCC_OscConfig+0xe4>
 8000ff6:	e016      	b.n	8001026 <HAL_RCC_OscConfig+0x136>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000ff8:	f7ff fc1a 	bl	8000830 <HAL_GetTick>
 8000ffc:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8000ffe:	e00a      	b.n	8001016 <HAL_RCC_OscConfig+0x126>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001000:	f7ff fc16 	bl	8000830 <HAL_GetTick>
 8001004:	4602      	mov	r2, r0
 8001006:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001008:	1ad3      	subs	r3, r2, r3
 800100a:	f241 3288 	movw	r2, #5000	; 0x1388
 800100e:	4293      	cmp	r3, r2
 8001010:	d901      	bls.n	8001016 <HAL_RCC_OscConfig+0x126>
          {
            return HAL_TIMEOUT;
 8001012:	2303      	movs	r3, #3
 8001014:	e345      	b.n	80016a2 <HAL_RCC_OscConfig+0x7b2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8001016:	4b4d      	ldr	r3, [pc, #308]	; (800114c <HAL_RCC_OscConfig+0x25c>)
 8001018:	681b      	ldr	r3, [r3, #0]
 800101a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800101e:	2b00      	cmp	r3, #0
 8001020:	d1ee      	bne.n	8001000 <HAL_RCC_OscConfig+0x110>
 8001022:	e000      	b.n	8001026 <HAL_RCC_OscConfig+0x136>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001024:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001026:	687b      	ldr	r3, [r7, #4]
 8001028:	681b      	ldr	r3, [r3, #0]
 800102a:	f003 0302 	and.w	r3, r3, #2
 800102e:	2b00      	cmp	r3, #0
 8001030:	f000 8094 	beq.w	800115c <HAL_RCC_OscConfig+0x26c>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001034:	4b45      	ldr	r3, [pc, #276]	; (800114c <HAL_RCC_OscConfig+0x25c>)
 8001036:	691b      	ldr	r3, [r3, #16]
 8001038:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800103c:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800103e:	4b43      	ldr	r3, [pc, #268]	; (800114c <HAL_RCC_OscConfig+0x25c>)
 8001040:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001042:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8001044:	6a3b      	ldr	r3, [r7, #32]
 8001046:	2b00      	cmp	r3, #0
 8001048:	d007      	beq.n	800105a <HAL_RCC_OscConfig+0x16a>
 800104a:	6a3b      	ldr	r3, [r7, #32]
 800104c:	2b18      	cmp	r3, #24
 800104e:	d12d      	bne.n	80010ac <HAL_RCC_OscConfig+0x1bc>
 8001050:	69fb      	ldr	r3, [r7, #28]
 8001052:	f003 0303 	and.w	r3, r3, #3
 8001056:	2b00      	cmp	r3, #0
 8001058:	d128      	bne.n	80010ac <HAL_RCC_OscConfig+0x1bc>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800105a:	4b3c      	ldr	r3, [pc, #240]	; (800114c <HAL_RCC_OscConfig+0x25c>)
 800105c:	681b      	ldr	r3, [r3, #0]
 800105e:	f003 0304 	and.w	r3, r3, #4
 8001062:	2b00      	cmp	r3, #0
 8001064:	d005      	beq.n	8001072 <HAL_RCC_OscConfig+0x182>
 8001066:	687b      	ldr	r3, [r7, #4]
 8001068:	68db      	ldr	r3, [r3, #12]
 800106a:	2b00      	cmp	r3, #0
 800106c:	d101      	bne.n	8001072 <HAL_RCC_OscConfig+0x182>
      {
        return HAL_ERROR;
 800106e:	2301      	movs	r3, #1
 8001070:	e317      	b.n	80016a2 <HAL_RCC_OscConfig+0x7b2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001072:	f7ff fc0d 	bl	8000890 <HAL_GetREVID>
 8001076:	4603      	mov	r3, r0
 8001078:	f241 0203 	movw	r2, #4099	; 0x1003
 800107c:	4293      	cmp	r3, r2
 800107e:	d80a      	bhi.n	8001096 <HAL_RCC_OscConfig+0x1a6>
 8001080:	4b32      	ldr	r3, [pc, #200]	; (800114c <HAL_RCC_OscConfig+0x25c>)
 8001082:	685b      	ldr	r3, [r3, #4]
 8001084:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8001088:	687b      	ldr	r3, [r7, #4]
 800108a:	691b      	ldr	r3, [r3, #16]
 800108c:	031b      	lsls	r3, r3, #12
 800108e:	492f      	ldr	r1, [pc, #188]	; (800114c <HAL_RCC_OscConfig+0x25c>)
 8001090:	4313      	orrs	r3, r2
 8001092:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001094:	e062      	b.n	800115c <HAL_RCC_OscConfig+0x26c>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001096:	4b2d      	ldr	r3, [pc, #180]	; (800114c <HAL_RCC_OscConfig+0x25c>)
 8001098:	685b      	ldr	r3, [r3, #4]
 800109a:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800109e:	687b      	ldr	r3, [r7, #4]
 80010a0:	691b      	ldr	r3, [r3, #16]
 80010a2:	061b      	lsls	r3, r3, #24
 80010a4:	4929      	ldr	r1, [pc, #164]	; (800114c <HAL_RCC_OscConfig+0x25c>)
 80010a6:	4313      	orrs	r3, r2
 80010a8:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80010aa:	e057      	b.n	800115c <HAL_RCC_OscConfig+0x26c>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	68db      	ldr	r3, [r3, #12]
 80010b0:	2b00      	cmp	r3, #0
 80010b2:	d038      	beq.n	8001126 <HAL_RCC_OscConfig+0x236>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80010b4:	4b25      	ldr	r3, [pc, #148]	; (800114c <HAL_RCC_OscConfig+0x25c>)
 80010b6:	681b      	ldr	r3, [r3, #0]
 80010b8:	f023 0219 	bic.w	r2, r3, #25
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	68db      	ldr	r3, [r3, #12]
 80010c0:	4922      	ldr	r1, [pc, #136]	; (800114c <HAL_RCC_OscConfig+0x25c>)
 80010c2:	4313      	orrs	r3, r2
 80010c4:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80010c6:	f7ff fbb3 	bl	8000830 <HAL_GetTick>
 80010ca:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80010cc:	e008      	b.n	80010e0 <HAL_RCC_OscConfig+0x1f0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80010ce:	f7ff fbaf 	bl	8000830 <HAL_GetTick>
 80010d2:	4602      	mov	r2, r0
 80010d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80010d6:	1ad3      	subs	r3, r2, r3
 80010d8:	2b02      	cmp	r3, #2
 80010da:	d901      	bls.n	80010e0 <HAL_RCC_OscConfig+0x1f0>
          {
            return HAL_TIMEOUT;
 80010dc:	2303      	movs	r3, #3
 80010de:	e2e0      	b.n	80016a2 <HAL_RCC_OscConfig+0x7b2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80010e0:	4b1a      	ldr	r3, [pc, #104]	; (800114c <HAL_RCC_OscConfig+0x25c>)
 80010e2:	681b      	ldr	r3, [r3, #0]
 80010e4:	f003 0304 	and.w	r3, r3, #4
 80010e8:	2b00      	cmp	r3, #0
 80010ea:	d0f0      	beq.n	80010ce <HAL_RCC_OscConfig+0x1de>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80010ec:	f7ff fbd0 	bl	8000890 <HAL_GetREVID>
 80010f0:	4603      	mov	r3, r0
 80010f2:	f241 0203 	movw	r2, #4099	; 0x1003
 80010f6:	4293      	cmp	r3, r2
 80010f8:	d80a      	bhi.n	8001110 <HAL_RCC_OscConfig+0x220>
 80010fa:	4b14      	ldr	r3, [pc, #80]	; (800114c <HAL_RCC_OscConfig+0x25c>)
 80010fc:	685b      	ldr	r3, [r3, #4]
 80010fe:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	691b      	ldr	r3, [r3, #16]
 8001106:	031b      	lsls	r3, r3, #12
 8001108:	4910      	ldr	r1, [pc, #64]	; (800114c <HAL_RCC_OscConfig+0x25c>)
 800110a:	4313      	orrs	r3, r2
 800110c:	604b      	str	r3, [r1, #4]
 800110e:	e025      	b.n	800115c <HAL_RCC_OscConfig+0x26c>
 8001110:	4b0e      	ldr	r3, [pc, #56]	; (800114c <HAL_RCC_OscConfig+0x25c>)
 8001112:	685b      	ldr	r3, [r3, #4]
 8001114:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	691b      	ldr	r3, [r3, #16]
 800111c:	061b      	lsls	r3, r3, #24
 800111e:	490b      	ldr	r1, [pc, #44]	; (800114c <HAL_RCC_OscConfig+0x25c>)
 8001120:	4313      	orrs	r3, r2
 8001122:	604b      	str	r3, [r1, #4]
 8001124:	e01a      	b.n	800115c <HAL_RCC_OscConfig+0x26c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001126:	4b09      	ldr	r3, [pc, #36]	; (800114c <HAL_RCC_OscConfig+0x25c>)
 8001128:	681b      	ldr	r3, [r3, #0]
 800112a:	4a08      	ldr	r2, [pc, #32]	; (800114c <HAL_RCC_OscConfig+0x25c>)
 800112c:	f023 0301 	bic.w	r3, r3, #1
 8001130:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001132:	f7ff fb7d 	bl	8000830 <HAL_GetTick>
 8001136:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8001138:	e00a      	b.n	8001150 <HAL_RCC_OscConfig+0x260>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800113a:	f7ff fb79 	bl	8000830 <HAL_GetTick>
 800113e:	4602      	mov	r2, r0
 8001140:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001142:	1ad3      	subs	r3, r2, r3
 8001144:	2b02      	cmp	r3, #2
 8001146:	d903      	bls.n	8001150 <HAL_RCC_OscConfig+0x260>
          {
            return HAL_TIMEOUT;
 8001148:	2303      	movs	r3, #3
 800114a:	e2aa      	b.n	80016a2 <HAL_RCC_OscConfig+0x7b2>
 800114c:	58024400 	.word	0x58024400
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8001150:	4ba0      	ldr	r3, [pc, #640]	; (80013d4 <HAL_RCC_OscConfig+0x4e4>)
 8001152:	681b      	ldr	r3, [r3, #0]
 8001154:	f003 0304 	and.w	r3, r3, #4
 8001158:	2b00      	cmp	r3, #0
 800115a:	d1ee      	bne.n	800113a <HAL_RCC_OscConfig+0x24a>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	681b      	ldr	r3, [r3, #0]
 8001160:	f003 0310 	and.w	r3, r3, #16
 8001164:	2b00      	cmp	r3, #0
 8001166:	f000 808f 	beq.w	8001288 <HAL_RCC_OscConfig+0x398>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800116a:	4b9a      	ldr	r3, [pc, #616]	; (80013d4 <HAL_RCC_OscConfig+0x4e4>)
 800116c:	691b      	ldr	r3, [r3, #16]
 800116e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8001172:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8001174:	4b97      	ldr	r3, [pc, #604]	; (80013d4 <HAL_RCC_OscConfig+0x4e4>)
 8001176:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001178:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 800117a:	69bb      	ldr	r3, [r7, #24]
 800117c:	2b08      	cmp	r3, #8
 800117e:	d007      	beq.n	8001190 <HAL_RCC_OscConfig+0x2a0>
 8001180:	69bb      	ldr	r3, [r7, #24]
 8001182:	2b18      	cmp	r3, #24
 8001184:	d12d      	bne.n	80011e2 <HAL_RCC_OscConfig+0x2f2>
 8001186:	697b      	ldr	r3, [r7, #20]
 8001188:	f003 0303 	and.w	r3, r3, #3
 800118c:	2b01      	cmp	r3, #1
 800118e:	d128      	bne.n	80011e2 <HAL_RCC_OscConfig+0x2f2>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8001190:	4b90      	ldr	r3, [pc, #576]	; (80013d4 <HAL_RCC_OscConfig+0x4e4>)
 8001192:	681b      	ldr	r3, [r3, #0]
 8001194:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001198:	2b00      	cmp	r3, #0
 800119a:	d005      	beq.n	80011a8 <HAL_RCC_OscConfig+0x2b8>
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	69db      	ldr	r3, [r3, #28]
 80011a0:	2b80      	cmp	r3, #128	; 0x80
 80011a2:	d001      	beq.n	80011a8 <HAL_RCC_OscConfig+0x2b8>
      {
        return HAL_ERROR;
 80011a4:	2301      	movs	r3, #1
 80011a6:	e27c      	b.n	80016a2 <HAL_RCC_OscConfig+0x7b2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80011a8:	f7ff fb72 	bl	8000890 <HAL_GetREVID>
 80011ac:	4603      	mov	r3, r0
 80011ae:	f241 0203 	movw	r2, #4099	; 0x1003
 80011b2:	4293      	cmp	r3, r2
 80011b4:	d80a      	bhi.n	80011cc <HAL_RCC_OscConfig+0x2dc>
 80011b6:	4b87      	ldr	r3, [pc, #540]	; (80013d4 <HAL_RCC_OscConfig+0x4e4>)
 80011b8:	685b      	ldr	r3, [r3, #4]
 80011ba:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	6a1b      	ldr	r3, [r3, #32]
 80011c2:	069b      	lsls	r3, r3, #26
 80011c4:	4983      	ldr	r1, [pc, #524]	; (80013d4 <HAL_RCC_OscConfig+0x4e4>)
 80011c6:	4313      	orrs	r3, r2
 80011c8:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80011ca:	e05d      	b.n	8001288 <HAL_RCC_OscConfig+0x398>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80011cc:	4b81      	ldr	r3, [pc, #516]	; (80013d4 <HAL_RCC_OscConfig+0x4e4>)
 80011ce:	68db      	ldr	r3, [r3, #12]
 80011d0:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	6a1b      	ldr	r3, [r3, #32]
 80011d8:	061b      	lsls	r3, r3, #24
 80011da:	497e      	ldr	r1, [pc, #504]	; (80013d4 <HAL_RCC_OscConfig+0x4e4>)
 80011dc:	4313      	orrs	r3, r2
 80011de:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80011e0:	e052      	b.n	8001288 <HAL_RCC_OscConfig+0x398>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	69db      	ldr	r3, [r3, #28]
 80011e6:	2b00      	cmp	r3, #0
 80011e8:	d035      	beq.n	8001256 <HAL_RCC_OscConfig+0x366>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 80011ea:	4b7a      	ldr	r3, [pc, #488]	; (80013d4 <HAL_RCC_OscConfig+0x4e4>)
 80011ec:	681b      	ldr	r3, [r3, #0]
 80011ee:	4a79      	ldr	r2, [pc, #484]	; (80013d4 <HAL_RCC_OscConfig+0x4e4>)
 80011f0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80011f4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80011f6:	f7ff fb1b 	bl	8000830 <HAL_GetTick>
 80011fa:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80011fc:	e008      	b.n	8001210 <HAL_RCC_OscConfig+0x320>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 80011fe:	f7ff fb17 	bl	8000830 <HAL_GetTick>
 8001202:	4602      	mov	r2, r0
 8001204:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001206:	1ad3      	subs	r3, r2, r3
 8001208:	2b02      	cmp	r3, #2
 800120a:	d901      	bls.n	8001210 <HAL_RCC_OscConfig+0x320>
          {
            return HAL_TIMEOUT;
 800120c:	2303      	movs	r3, #3
 800120e:	e248      	b.n	80016a2 <HAL_RCC_OscConfig+0x7b2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8001210:	4b70      	ldr	r3, [pc, #448]	; (80013d4 <HAL_RCC_OscConfig+0x4e4>)
 8001212:	681b      	ldr	r3, [r3, #0]
 8001214:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001218:	2b00      	cmp	r3, #0
 800121a:	d0f0      	beq.n	80011fe <HAL_RCC_OscConfig+0x30e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800121c:	f7ff fb38 	bl	8000890 <HAL_GetREVID>
 8001220:	4603      	mov	r3, r0
 8001222:	f241 0203 	movw	r2, #4099	; 0x1003
 8001226:	4293      	cmp	r3, r2
 8001228:	d80a      	bhi.n	8001240 <HAL_RCC_OscConfig+0x350>
 800122a:	4b6a      	ldr	r3, [pc, #424]	; (80013d4 <HAL_RCC_OscConfig+0x4e4>)
 800122c:	685b      	ldr	r3, [r3, #4]
 800122e:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	6a1b      	ldr	r3, [r3, #32]
 8001236:	069b      	lsls	r3, r3, #26
 8001238:	4966      	ldr	r1, [pc, #408]	; (80013d4 <HAL_RCC_OscConfig+0x4e4>)
 800123a:	4313      	orrs	r3, r2
 800123c:	604b      	str	r3, [r1, #4]
 800123e:	e023      	b.n	8001288 <HAL_RCC_OscConfig+0x398>
 8001240:	4b64      	ldr	r3, [pc, #400]	; (80013d4 <HAL_RCC_OscConfig+0x4e4>)
 8001242:	68db      	ldr	r3, [r3, #12]
 8001244:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	6a1b      	ldr	r3, [r3, #32]
 800124c:	061b      	lsls	r3, r3, #24
 800124e:	4961      	ldr	r1, [pc, #388]	; (80013d4 <HAL_RCC_OscConfig+0x4e4>)
 8001250:	4313      	orrs	r3, r2
 8001252:	60cb      	str	r3, [r1, #12]
 8001254:	e018      	b.n	8001288 <HAL_RCC_OscConfig+0x398>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8001256:	4b5f      	ldr	r3, [pc, #380]	; (80013d4 <HAL_RCC_OscConfig+0x4e4>)
 8001258:	681b      	ldr	r3, [r3, #0]
 800125a:	4a5e      	ldr	r2, [pc, #376]	; (80013d4 <HAL_RCC_OscConfig+0x4e4>)
 800125c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001260:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001262:	f7ff fae5 	bl	8000830 <HAL_GetTick>
 8001266:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8001268:	e008      	b.n	800127c <HAL_RCC_OscConfig+0x38c>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 800126a:	f7ff fae1 	bl	8000830 <HAL_GetTick>
 800126e:	4602      	mov	r2, r0
 8001270:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001272:	1ad3      	subs	r3, r2, r3
 8001274:	2b02      	cmp	r3, #2
 8001276:	d901      	bls.n	800127c <HAL_RCC_OscConfig+0x38c>
          {
            return HAL_TIMEOUT;
 8001278:	2303      	movs	r3, #3
 800127a:	e212      	b.n	80016a2 <HAL_RCC_OscConfig+0x7b2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800127c:	4b55      	ldr	r3, [pc, #340]	; (80013d4 <HAL_RCC_OscConfig+0x4e4>)
 800127e:	681b      	ldr	r3, [r3, #0]
 8001280:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001284:	2b00      	cmp	r3, #0
 8001286:	d1f0      	bne.n	800126a <HAL_RCC_OscConfig+0x37a>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	681b      	ldr	r3, [r3, #0]
 800128c:	f003 0308 	and.w	r3, r3, #8
 8001290:	2b00      	cmp	r3, #0
 8001292:	d036      	beq.n	8001302 <HAL_RCC_OscConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	695b      	ldr	r3, [r3, #20]
 8001298:	2b00      	cmp	r3, #0
 800129a:	d019      	beq.n	80012d0 <HAL_RCC_OscConfig+0x3e0>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800129c:	4b4d      	ldr	r3, [pc, #308]	; (80013d4 <HAL_RCC_OscConfig+0x4e4>)
 800129e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80012a0:	4a4c      	ldr	r2, [pc, #304]	; (80013d4 <HAL_RCC_OscConfig+0x4e4>)
 80012a2:	f043 0301 	orr.w	r3, r3, #1
 80012a6:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80012a8:	f7ff fac2 	bl	8000830 <HAL_GetTick>
 80012ac:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80012ae:	e008      	b.n	80012c2 <HAL_RCC_OscConfig+0x3d2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80012b0:	f7ff fabe 	bl	8000830 <HAL_GetTick>
 80012b4:	4602      	mov	r2, r0
 80012b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012b8:	1ad3      	subs	r3, r2, r3
 80012ba:	2b02      	cmp	r3, #2
 80012bc:	d901      	bls.n	80012c2 <HAL_RCC_OscConfig+0x3d2>
        {
          return HAL_TIMEOUT;
 80012be:	2303      	movs	r3, #3
 80012c0:	e1ef      	b.n	80016a2 <HAL_RCC_OscConfig+0x7b2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80012c2:	4b44      	ldr	r3, [pc, #272]	; (80013d4 <HAL_RCC_OscConfig+0x4e4>)
 80012c4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80012c6:	f003 0302 	and.w	r3, r3, #2
 80012ca:	2b00      	cmp	r3, #0
 80012cc:	d0f0      	beq.n	80012b0 <HAL_RCC_OscConfig+0x3c0>
 80012ce:	e018      	b.n	8001302 <HAL_RCC_OscConfig+0x412>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80012d0:	4b40      	ldr	r3, [pc, #256]	; (80013d4 <HAL_RCC_OscConfig+0x4e4>)
 80012d2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80012d4:	4a3f      	ldr	r2, [pc, #252]	; (80013d4 <HAL_RCC_OscConfig+0x4e4>)
 80012d6:	f023 0301 	bic.w	r3, r3, #1
 80012da:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80012dc:	f7ff faa8 	bl	8000830 <HAL_GetTick>
 80012e0:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80012e2:	e008      	b.n	80012f6 <HAL_RCC_OscConfig+0x406>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80012e4:	f7ff faa4 	bl	8000830 <HAL_GetTick>
 80012e8:	4602      	mov	r2, r0
 80012ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012ec:	1ad3      	subs	r3, r2, r3
 80012ee:	2b02      	cmp	r3, #2
 80012f0:	d901      	bls.n	80012f6 <HAL_RCC_OscConfig+0x406>
        {
          return HAL_TIMEOUT;
 80012f2:	2303      	movs	r3, #3
 80012f4:	e1d5      	b.n	80016a2 <HAL_RCC_OscConfig+0x7b2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80012f6:	4b37      	ldr	r3, [pc, #220]	; (80013d4 <HAL_RCC_OscConfig+0x4e4>)
 80012f8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80012fa:	f003 0302 	and.w	r3, r3, #2
 80012fe:	2b00      	cmp	r3, #0
 8001300:	d1f0      	bne.n	80012e4 <HAL_RCC_OscConfig+0x3f4>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	681b      	ldr	r3, [r3, #0]
 8001306:	f003 0320 	and.w	r3, r3, #32
 800130a:	2b00      	cmp	r3, #0
 800130c:	d036      	beq.n	800137c <HAL_RCC_OscConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	699b      	ldr	r3, [r3, #24]
 8001312:	2b00      	cmp	r3, #0
 8001314:	d019      	beq.n	800134a <HAL_RCC_OscConfig+0x45a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8001316:	4b2f      	ldr	r3, [pc, #188]	; (80013d4 <HAL_RCC_OscConfig+0x4e4>)
 8001318:	681b      	ldr	r3, [r3, #0]
 800131a:	4a2e      	ldr	r2, [pc, #184]	; (80013d4 <HAL_RCC_OscConfig+0x4e4>)
 800131c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001320:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8001322:	f7ff fa85 	bl	8000830 <HAL_GetTick>
 8001326:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8001328:	e008      	b.n	800133c <HAL_RCC_OscConfig+0x44c>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 800132a:	f7ff fa81 	bl	8000830 <HAL_GetTick>
 800132e:	4602      	mov	r2, r0
 8001330:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001332:	1ad3      	subs	r3, r2, r3
 8001334:	2b02      	cmp	r3, #2
 8001336:	d901      	bls.n	800133c <HAL_RCC_OscConfig+0x44c>
        {
          return HAL_TIMEOUT;
 8001338:	2303      	movs	r3, #3
 800133a:	e1b2      	b.n	80016a2 <HAL_RCC_OscConfig+0x7b2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800133c:	4b25      	ldr	r3, [pc, #148]	; (80013d4 <HAL_RCC_OscConfig+0x4e4>)
 800133e:	681b      	ldr	r3, [r3, #0]
 8001340:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001344:	2b00      	cmp	r3, #0
 8001346:	d0f0      	beq.n	800132a <HAL_RCC_OscConfig+0x43a>
 8001348:	e018      	b.n	800137c <HAL_RCC_OscConfig+0x48c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800134a:	4b22      	ldr	r3, [pc, #136]	; (80013d4 <HAL_RCC_OscConfig+0x4e4>)
 800134c:	681b      	ldr	r3, [r3, #0]
 800134e:	4a21      	ldr	r2, [pc, #132]	; (80013d4 <HAL_RCC_OscConfig+0x4e4>)
 8001350:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8001354:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8001356:	f7ff fa6b 	bl	8000830 <HAL_GetTick>
 800135a:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800135c:	e008      	b.n	8001370 <HAL_RCC_OscConfig+0x480>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 800135e:	f7ff fa67 	bl	8000830 <HAL_GetTick>
 8001362:	4602      	mov	r2, r0
 8001364:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001366:	1ad3      	subs	r3, r2, r3
 8001368:	2b02      	cmp	r3, #2
 800136a:	d901      	bls.n	8001370 <HAL_RCC_OscConfig+0x480>
        {
          return HAL_TIMEOUT;
 800136c:	2303      	movs	r3, #3
 800136e:	e198      	b.n	80016a2 <HAL_RCC_OscConfig+0x7b2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8001370:	4b18      	ldr	r3, [pc, #96]	; (80013d4 <HAL_RCC_OscConfig+0x4e4>)
 8001372:	681b      	ldr	r3, [r3, #0]
 8001374:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001378:	2b00      	cmp	r3, #0
 800137a:	d1f0      	bne.n	800135e <HAL_RCC_OscConfig+0x46e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	681b      	ldr	r3, [r3, #0]
 8001380:	f003 0304 	and.w	r3, r3, #4
 8001384:	2b00      	cmp	r3, #0
 8001386:	f000 8086 	beq.w	8001496 <HAL_RCC_OscConfig+0x5a6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 800138a:	4b13      	ldr	r3, [pc, #76]	; (80013d8 <HAL_RCC_OscConfig+0x4e8>)
 800138c:	681b      	ldr	r3, [r3, #0]
 800138e:	4a12      	ldr	r2, [pc, #72]	; (80013d8 <HAL_RCC_OscConfig+0x4e8>)
 8001390:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001394:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8001396:	f7ff fa4b 	bl	8000830 <HAL_GetTick>
 800139a:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800139c:	e008      	b.n	80013b0 <HAL_RCC_OscConfig+0x4c0>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 800139e:	f7ff fa47 	bl	8000830 <HAL_GetTick>
 80013a2:	4602      	mov	r2, r0
 80013a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013a6:	1ad3      	subs	r3, r2, r3
 80013a8:	2b64      	cmp	r3, #100	; 0x64
 80013aa:	d901      	bls.n	80013b0 <HAL_RCC_OscConfig+0x4c0>
      {
        return HAL_TIMEOUT;
 80013ac:	2303      	movs	r3, #3
 80013ae:	e178      	b.n	80016a2 <HAL_RCC_OscConfig+0x7b2>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80013b0:	4b09      	ldr	r3, [pc, #36]	; (80013d8 <HAL_RCC_OscConfig+0x4e8>)
 80013b2:	681b      	ldr	r3, [r3, #0]
 80013b4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80013b8:	2b00      	cmp	r3, #0
 80013ba:	d0f0      	beq.n	800139e <HAL_RCC_OscConfig+0x4ae>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	689b      	ldr	r3, [r3, #8]
 80013c0:	2b01      	cmp	r3, #1
 80013c2:	d10b      	bne.n	80013dc <HAL_RCC_OscConfig+0x4ec>
 80013c4:	4b03      	ldr	r3, [pc, #12]	; (80013d4 <HAL_RCC_OscConfig+0x4e4>)
 80013c6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80013c8:	4a02      	ldr	r2, [pc, #8]	; (80013d4 <HAL_RCC_OscConfig+0x4e4>)
 80013ca:	f043 0301 	orr.w	r3, r3, #1
 80013ce:	6713      	str	r3, [r2, #112]	; 0x70
 80013d0:	e032      	b.n	8001438 <HAL_RCC_OscConfig+0x548>
 80013d2:	bf00      	nop
 80013d4:	58024400 	.word	0x58024400
 80013d8:	58024800 	.word	0x58024800
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	689b      	ldr	r3, [r3, #8]
 80013e0:	2b00      	cmp	r3, #0
 80013e2:	d10c      	bne.n	80013fe <HAL_RCC_OscConfig+0x50e>
 80013e4:	4b8c      	ldr	r3, [pc, #560]	; (8001618 <HAL_RCC_OscConfig+0x728>)
 80013e6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80013e8:	4a8b      	ldr	r2, [pc, #556]	; (8001618 <HAL_RCC_OscConfig+0x728>)
 80013ea:	f023 0301 	bic.w	r3, r3, #1
 80013ee:	6713      	str	r3, [r2, #112]	; 0x70
 80013f0:	4b89      	ldr	r3, [pc, #548]	; (8001618 <HAL_RCC_OscConfig+0x728>)
 80013f2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80013f4:	4a88      	ldr	r2, [pc, #544]	; (8001618 <HAL_RCC_OscConfig+0x728>)
 80013f6:	f023 0304 	bic.w	r3, r3, #4
 80013fa:	6713      	str	r3, [r2, #112]	; 0x70
 80013fc:	e01c      	b.n	8001438 <HAL_RCC_OscConfig+0x548>
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	689b      	ldr	r3, [r3, #8]
 8001402:	2b05      	cmp	r3, #5
 8001404:	d10c      	bne.n	8001420 <HAL_RCC_OscConfig+0x530>
 8001406:	4b84      	ldr	r3, [pc, #528]	; (8001618 <HAL_RCC_OscConfig+0x728>)
 8001408:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800140a:	4a83      	ldr	r2, [pc, #524]	; (8001618 <HAL_RCC_OscConfig+0x728>)
 800140c:	f043 0304 	orr.w	r3, r3, #4
 8001410:	6713      	str	r3, [r2, #112]	; 0x70
 8001412:	4b81      	ldr	r3, [pc, #516]	; (8001618 <HAL_RCC_OscConfig+0x728>)
 8001414:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001416:	4a80      	ldr	r2, [pc, #512]	; (8001618 <HAL_RCC_OscConfig+0x728>)
 8001418:	f043 0301 	orr.w	r3, r3, #1
 800141c:	6713      	str	r3, [r2, #112]	; 0x70
 800141e:	e00b      	b.n	8001438 <HAL_RCC_OscConfig+0x548>
 8001420:	4b7d      	ldr	r3, [pc, #500]	; (8001618 <HAL_RCC_OscConfig+0x728>)
 8001422:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001424:	4a7c      	ldr	r2, [pc, #496]	; (8001618 <HAL_RCC_OscConfig+0x728>)
 8001426:	f023 0301 	bic.w	r3, r3, #1
 800142a:	6713      	str	r3, [r2, #112]	; 0x70
 800142c:	4b7a      	ldr	r3, [pc, #488]	; (8001618 <HAL_RCC_OscConfig+0x728>)
 800142e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001430:	4a79      	ldr	r2, [pc, #484]	; (8001618 <HAL_RCC_OscConfig+0x728>)
 8001432:	f023 0304 	bic.w	r3, r3, #4
 8001436:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	689b      	ldr	r3, [r3, #8]
 800143c:	2b00      	cmp	r3, #0
 800143e:	d015      	beq.n	800146c <HAL_RCC_OscConfig+0x57c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001440:	f7ff f9f6 	bl	8000830 <HAL_GetTick>
 8001444:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001446:	e00a      	b.n	800145e <HAL_RCC_OscConfig+0x56e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001448:	f7ff f9f2 	bl	8000830 <HAL_GetTick>
 800144c:	4602      	mov	r2, r0
 800144e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001450:	1ad3      	subs	r3, r2, r3
 8001452:	f241 3288 	movw	r2, #5000	; 0x1388
 8001456:	4293      	cmp	r3, r2
 8001458:	d901      	bls.n	800145e <HAL_RCC_OscConfig+0x56e>
        {
          return HAL_TIMEOUT;
 800145a:	2303      	movs	r3, #3
 800145c:	e121      	b.n	80016a2 <HAL_RCC_OscConfig+0x7b2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800145e:	4b6e      	ldr	r3, [pc, #440]	; (8001618 <HAL_RCC_OscConfig+0x728>)
 8001460:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001462:	f003 0302 	and.w	r3, r3, #2
 8001466:	2b00      	cmp	r3, #0
 8001468:	d0ee      	beq.n	8001448 <HAL_RCC_OscConfig+0x558>
 800146a:	e014      	b.n	8001496 <HAL_RCC_OscConfig+0x5a6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800146c:	f7ff f9e0 	bl	8000830 <HAL_GetTick>
 8001470:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8001472:	e00a      	b.n	800148a <HAL_RCC_OscConfig+0x59a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001474:	f7ff f9dc 	bl	8000830 <HAL_GetTick>
 8001478:	4602      	mov	r2, r0
 800147a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800147c:	1ad3      	subs	r3, r2, r3
 800147e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001482:	4293      	cmp	r3, r2
 8001484:	d901      	bls.n	800148a <HAL_RCC_OscConfig+0x59a>
        {
          return HAL_TIMEOUT;
 8001486:	2303      	movs	r3, #3
 8001488:	e10b      	b.n	80016a2 <HAL_RCC_OscConfig+0x7b2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800148a:	4b63      	ldr	r3, [pc, #396]	; (8001618 <HAL_RCC_OscConfig+0x728>)
 800148c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800148e:	f003 0302 	and.w	r3, r3, #2
 8001492:	2b00      	cmp	r3, #0
 8001494:	d1ee      	bne.n	8001474 <HAL_RCC_OscConfig+0x584>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800149a:	2b00      	cmp	r3, #0
 800149c:	f000 8100 	beq.w	80016a0 <HAL_RCC_OscConfig+0x7b0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 80014a0:	4b5d      	ldr	r3, [pc, #372]	; (8001618 <HAL_RCC_OscConfig+0x728>)
 80014a2:	691b      	ldr	r3, [r3, #16]
 80014a4:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80014a8:	2b18      	cmp	r3, #24
 80014aa:	f000 80bb 	beq.w	8001624 <HAL_RCC_OscConfig+0x734>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80014b2:	2b02      	cmp	r3, #2
 80014b4:	f040 8095 	bne.w	80015e2 <HAL_RCC_OscConfig+0x6f2>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80014b8:	4b57      	ldr	r3, [pc, #348]	; (8001618 <HAL_RCC_OscConfig+0x728>)
 80014ba:	681b      	ldr	r3, [r3, #0]
 80014bc:	4a56      	ldr	r2, [pc, #344]	; (8001618 <HAL_RCC_OscConfig+0x728>)
 80014be:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80014c2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80014c4:	f7ff f9b4 	bl	8000830 <HAL_GetTick>
 80014c8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80014ca:	e008      	b.n	80014de <HAL_RCC_OscConfig+0x5ee>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80014cc:	f7ff f9b0 	bl	8000830 <HAL_GetTick>
 80014d0:	4602      	mov	r2, r0
 80014d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014d4:	1ad3      	subs	r3, r2, r3
 80014d6:	2b02      	cmp	r3, #2
 80014d8:	d901      	bls.n	80014de <HAL_RCC_OscConfig+0x5ee>
          {
            return HAL_TIMEOUT;
 80014da:	2303      	movs	r3, #3
 80014dc:	e0e1      	b.n	80016a2 <HAL_RCC_OscConfig+0x7b2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80014de:	4b4e      	ldr	r3, [pc, #312]	; (8001618 <HAL_RCC_OscConfig+0x728>)
 80014e0:	681b      	ldr	r3, [r3, #0]
 80014e2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80014e6:	2b00      	cmp	r3, #0
 80014e8:	d1f0      	bne.n	80014cc <HAL_RCC_OscConfig+0x5dc>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80014ea:	4b4b      	ldr	r3, [pc, #300]	; (8001618 <HAL_RCC_OscConfig+0x728>)
 80014ec:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80014ee:	4b4b      	ldr	r3, [pc, #300]	; (800161c <HAL_RCC_OscConfig+0x72c>)
 80014f0:	4013      	ands	r3, r2
 80014f2:	687a      	ldr	r2, [r7, #4]
 80014f4:	6a91      	ldr	r1, [r2, #40]	; 0x28
 80014f6:	687a      	ldr	r2, [r7, #4]
 80014f8:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80014fa:	0112      	lsls	r2, r2, #4
 80014fc:	430a      	orrs	r2, r1
 80014fe:	4946      	ldr	r1, [pc, #280]	; (8001618 <HAL_RCC_OscConfig+0x728>)
 8001500:	4313      	orrs	r3, r2
 8001502:	628b      	str	r3, [r1, #40]	; 0x28
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001508:	3b01      	subs	r3, #1
 800150a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001512:	3b01      	subs	r3, #1
 8001514:	025b      	lsls	r3, r3, #9
 8001516:	b29b      	uxth	r3, r3
 8001518:	431a      	orrs	r2, r3
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800151e:	3b01      	subs	r3, #1
 8001520:	041b      	lsls	r3, r3, #16
 8001522:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8001526:	431a      	orrs	r2, r3
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800152c:	3b01      	subs	r3, #1
 800152e:	061b      	lsls	r3, r3, #24
 8001530:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8001534:	4938      	ldr	r1, [pc, #224]	; (8001618 <HAL_RCC_OscConfig+0x728>)
 8001536:	4313      	orrs	r3, r2
 8001538:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 800153a:	4b37      	ldr	r3, [pc, #220]	; (8001618 <HAL_RCC_OscConfig+0x728>)
 800153c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800153e:	4a36      	ldr	r2, [pc, #216]	; (8001618 <HAL_RCC_OscConfig+0x728>)
 8001540:	f023 0301 	bic.w	r3, r3, #1
 8001544:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8001546:	4b34      	ldr	r3, [pc, #208]	; (8001618 <HAL_RCC_OscConfig+0x728>)
 8001548:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800154a:	4b35      	ldr	r3, [pc, #212]	; (8001620 <HAL_RCC_OscConfig+0x730>)
 800154c:	4013      	ands	r3, r2
 800154e:	687a      	ldr	r2, [r7, #4]
 8001550:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8001552:	00d2      	lsls	r2, r2, #3
 8001554:	4930      	ldr	r1, [pc, #192]	; (8001618 <HAL_RCC_OscConfig+0x728>)
 8001556:	4313      	orrs	r3, r2
 8001558:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 800155a:	4b2f      	ldr	r3, [pc, #188]	; (8001618 <HAL_RCC_OscConfig+0x728>)
 800155c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800155e:	f023 020c 	bic.w	r2, r3, #12
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001566:	492c      	ldr	r1, [pc, #176]	; (8001618 <HAL_RCC_OscConfig+0x728>)
 8001568:	4313      	orrs	r3, r2
 800156a:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 800156c:	4b2a      	ldr	r3, [pc, #168]	; (8001618 <HAL_RCC_OscConfig+0x728>)
 800156e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001570:	f023 0202 	bic.w	r2, r3, #2
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001578:	4927      	ldr	r1, [pc, #156]	; (8001618 <HAL_RCC_OscConfig+0x728>)
 800157a:	4313      	orrs	r3, r2
 800157c:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800157e:	4b26      	ldr	r3, [pc, #152]	; (8001618 <HAL_RCC_OscConfig+0x728>)
 8001580:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001582:	4a25      	ldr	r2, [pc, #148]	; (8001618 <HAL_RCC_OscConfig+0x728>)
 8001584:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001588:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800158a:	4b23      	ldr	r3, [pc, #140]	; (8001618 <HAL_RCC_OscConfig+0x728>)
 800158c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800158e:	4a22      	ldr	r2, [pc, #136]	; (8001618 <HAL_RCC_OscConfig+0x728>)
 8001590:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001594:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8001596:	4b20      	ldr	r3, [pc, #128]	; (8001618 <HAL_RCC_OscConfig+0x728>)
 8001598:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800159a:	4a1f      	ldr	r2, [pc, #124]	; (8001618 <HAL_RCC_OscConfig+0x728>)
 800159c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80015a0:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 80015a2:	4b1d      	ldr	r3, [pc, #116]	; (8001618 <HAL_RCC_OscConfig+0x728>)
 80015a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80015a6:	4a1c      	ldr	r2, [pc, #112]	; (8001618 <HAL_RCC_OscConfig+0x728>)
 80015a8:	f043 0301 	orr.w	r3, r3, #1
 80015ac:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80015ae:	4b1a      	ldr	r3, [pc, #104]	; (8001618 <HAL_RCC_OscConfig+0x728>)
 80015b0:	681b      	ldr	r3, [r3, #0]
 80015b2:	4a19      	ldr	r2, [pc, #100]	; (8001618 <HAL_RCC_OscConfig+0x728>)
 80015b4:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80015b8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80015ba:	f7ff f939 	bl	8000830 <HAL_GetTick>
 80015be:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80015c0:	e008      	b.n	80015d4 <HAL_RCC_OscConfig+0x6e4>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80015c2:	f7ff f935 	bl	8000830 <HAL_GetTick>
 80015c6:	4602      	mov	r2, r0
 80015c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015ca:	1ad3      	subs	r3, r2, r3
 80015cc:	2b02      	cmp	r3, #2
 80015ce:	d901      	bls.n	80015d4 <HAL_RCC_OscConfig+0x6e4>
          {
            return HAL_TIMEOUT;
 80015d0:	2303      	movs	r3, #3
 80015d2:	e066      	b.n	80016a2 <HAL_RCC_OscConfig+0x7b2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80015d4:	4b10      	ldr	r3, [pc, #64]	; (8001618 <HAL_RCC_OscConfig+0x728>)
 80015d6:	681b      	ldr	r3, [r3, #0]
 80015d8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80015dc:	2b00      	cmp	r3, #0
 80015de:	d0f0      	beq.n	80015c2 <HAL_RCC_OscConfig+0x6d2>
 80015e0:	e05e      	b.n	80016a0 <HAL_RCC_OscConfig+0x7b0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80015e2:	4b0d      	ldr	r3, [pc, #52]	; (8001618 <HAL_RCC_OscConfig+0x728>)
 80015e4:	681b      	ldr	r3, [r3, #0]
 80015e6:	4a0c      	ldr	r2, [pc, #48]	; (8001618 <HAL_RCC_OscConfig+0x728>)
 80015e8:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80015ec:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80015ee:	f7ff f91f 	bl	8000830 <HAL_GetTick>
 80015f2:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80015f4:	e008      	b.n	8001608 <HAL_RCC_OscConfig+0x718>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80015f6:	f7ff f91b 	bl	8000830 <HAL_GetTick>
 80015fa:	4602      	mov	r2, r0
 80015fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015fe:	1ad3      	subs	r3, r2, r3
 8001600:	2b02      	cmp	r3, #2
 8001602:	d901      	bls.n	8001608 <HAL_RCC_OscConfig+0x718>
          {
            return HAL_TIMEOUT;
 8001604:	2303      	movs	r3, #3
 8001606:	e04c      	b.n	80016a2 <HAL_RCC_OscConfig+0x7b2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8001608:	4b03      	ldr	r3, [pc, #12]	; (8001618 <HAL_RCC_OscConfig+0x728>)
 800160a:	681b      	ldr	r3, [r3, #0]
 800160c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001610:	2b00      	cmp	r3, #0
 8001612:	d1f0      	bne.n	80015f6 <HAL_RCC_OscConfig+0x706>
 8001614:	e044      	b.n	80016a0 <HAL_RCC_OscConfig+0x7b0>
 8001616:	bf00      	nop
 8001618:	58024400 	.word	0x58024400
 800161c:	fffffc0c 	.word	0xfffffc0c
 8001620:	ffff0007 	.word	0xffff0007
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8001624:	4b21      	ldr	r3, [pc, #132]	; (80016ac <HAL_RCC_OscConfig+0x7bc>)
 8001626:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001628:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 800162a:	4b20      	ldr	r3, [pc, #128]	; (80016ac <HAL_RCC_OscConfig+0x7bc>)
 800162c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800162e:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001634:	2b01      	cmp	r3, #1
 8001636:	d031      	beq.n	800169c <HAL_RCC_OscConfig+0x7ac>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001638:	693b      	ldr	r3, [r7, #16]
 800163a:	f003 0203 	and.w	r2, r3, #3
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001642:	429a      	cmp	r2, r3
 8001644:	d12a      	bne.n	800169c <HAL_RCC_OscConfig+0x7ac>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8001646:	693b      	ldr	r3, [r7, #16]
 8001648:	091b      	lsrs	r3, r3, #4
 800164a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001652:	429a      	cmp	r2, r3
 8001654:	d122      	bne.n	800169c <HAL_RCC_OscConfig+0x7ac>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8001656:	68fb      	ldr	r3, [r7, #12]
 8001658:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001660:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8001662:	429a      	cmp	r2, r3
 8001664:	d11a      	bne.n	800169c <HAL_RCC_OscConfig+0x7ac>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8001666:	68fb      	ldr	r3, [r7, #12]
 8001668:	0a5b      	lsrs	r3, r3, #9
 800166a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001672:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8001674:	429a      	cmp	r2, r3
 8001676:	d111      	bne.n	800169c <HAL_RCC_OscConfig+0x7ac>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8001678:	68fb      	ldr	r3, [r7, #12]
 800167a:	0c1b      	lsrs	r3, r3, #16
 800167c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001684:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8001686:	429a      	cmp	r2, r3
 8001688:	d108      	bne.n	800169c <HAL_RCC_OscConfig+0x7ac>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 800168a:	68fb      	ldr	r3, [r7, #12]
 800168c:	0e1b      	lsrs	r3, r3, #24
 800168e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001696:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8001698:	429a      	cmp	r2, r3
 800169a:	d001      	beq.n	80016a0 <HAL_RCC_OscConfig+0x7b0>
      {
        return HAL_ERROR;
 800169c:	2301      	movs	r3, #1
 800169e:	e000      	b.n	80016a2 <HAL_RCC_OscConfig+0x7b2>
      }
    }
  }
  return HAL_OK;
 80016a0:	2300      	movs	r3, #0
}
 80016a2:	4618      	mov	r0, r3
 80016a4:	3730      	adds	r7, #48	; 0x30
 80016a6:	46bd      	mov	sp, r7
 80016a8:	bd80      	pop	{r7, pc}
 80016aa:	bf00      	nop
 80016ac:	58024400 	.word	0x58024400

080016b0 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80016b0:	b580      	push	{r7, lr}
 80016b2:	b084      	sub	sp, #16
 80016b4:	af00      	add	r7, sp, #0
 80016b6:	6078      	str	r0, [r7, #4]
 80016b8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	2b00      	cmp	r3, #0
 80016be:	d101      	bne.n	80016c4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80016c0:	2301      	movs	r3, #1
 80016c2:	e18d      	b.n	80019e0 <HAL_RCC_ClockConfig+0x330>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80016c4:	4b8a      	ldr	r3, [pc, #552]	; (80018f0 <HAL_RCC_ClockConfig+0x240>)
 80016c6:	681b      	ldr	r3, [r3, #0]
 80016c8:	f003 030f 	and.w	r3, r3, #15
 80016cc:	683a      	ldr	r2, [r7, #0]
 80016ce:	429a      	cmp	r2, r3
 80016d0:	d910      	bls.n	80016f4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80016d2:	4b87      	ldr	r3, [pc, #540]	; (80018f0 <HAL_RCC_ClockConfig+0x240>)
 80016d4:	681b      	ldr	r3, [r3, #0]
 80016d6:	f023 020f 	bic.w	r2, r3, #15
 80016da:	4985      	ldr	r1, [pc, #532]	; (80018f0 <HAL_RCC_ClockConfig+0x240>)
 80016dc:	683b      	ldr	r3, [r7, #0]
 80016de:	4313      	orrs	r3, r2
 80016e0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80016e2:	4b83      	ldr	r3, [pc, #524]	; (80018f0 <HAL_RCC_ClockConfig+0x240>)
 80016e4:	681b      	ldr	r3, [r3, #0]
 80016e6:	f003 030f 	and.w	r3, r3, #15
 80016ea:	683a      	ldr	r2, [r7, #0]
 80016ec:	429a      	cmp	r2, r3
 80016ee:	d001      	beq.n	80016f4 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80016f0:	2301      	movs	r3, #1
 80016f2:	e175      	b.n	80019e0 <HAL_RCC_ClockConfig+0x330>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	681b      	ldr	r3, [r3, #0]
 80016f8:	f003 0304 	and.w	r3, r3, #4
 80016fc:	2b00      	cmp	r3, #0
 80016fe:	d010      	beq.n	8001722 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	691a      	ldr	r2, [r3, #16]
 8001704:	4b7b      	ldr	r3, [pc, #492]	; (80018f4 <HAL_RCC_ClockConfig+0x244>)
 8001706:	699b      	ldr	r3, [r3, #24]
 8001708:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800170c:	429a      	cmp	r2, r3
 800170e:	d908      	bls.n	8001722 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8001710:	4b78      	ldr	r3, [pc, #480]	; (80018f4 <HAL_RCC_ClockConfig+0x244>)
 8001712:	699b      	ldr	r3, [r3, #24]
 8001714:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	691b      	ldr	r3, [r3, #16]
 800171c:	4975      	ldr	r1, [pc, #468]	; (80018f4 <HAL_RCC_ClockConfig+0x244>)
 800171e:	4313      	orrs	r3, r2
 8001720:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	681b      	ldr	r3, [r3, #0]
 8001726:	f003 0308 	and.w	r3, r3, #8
 800172a:	2b00      	cmp	r3, #0
 800172c:	d010      	beq.n	8001750 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	695a      	ldr	r2, [r3, #20]
 8001732:	4b70      	ldr	r3, [pc, #448]	; (80018f4 <HAL_RCC_ClockConfig+0x244>)
 8001734:	69db      	ldr	r3, [r3, #28]
 8001736:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800173a:	429a      	cmp	r2, r3
 800173c:	d908      	bls.n	8001750 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800173e:	4b6d      	ldr	r3, [pc, #436]	; (80018f4 <HAL_RCC_ClockConfig+0x244>)
 8001740:	69db      	ldr	r3, [r3, #28]
 8001742:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	695b      	ldr	r3, [r3, #20]
 800174a:	496a      	ldr	r1, [pc, #424]	; (80018f4 <HAL_RCC_ClockConfig+0x244>)
 800174c:	4313      	orrs	r3, r2
 800174e:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	681b      	ldr	r3, [r3, #0]
 8001754:	f003 0310 	and.w	r3, r3, #16
 8001758:	2b00      	cmp	r3, #0
 800175a:	d010      	beq.n	800177e <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	699a      	ldr	r2, [r3, #24]
 8001760:	4b64      	ldr	r3, [pc, #400]	; (80018f4 <HAL_RCC_ClockConfig+0x244>)
 8001762:	69db      	ldr	r3, [r3, #28]
 8001764:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8001768:	429a      	cmp	r2, r3
 800176a:	d908      	bls.n	800177e <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800176c:	4b61      	ldr	r3, [pc, #388]	; (80018f4 <HAL_RCC_ClockConfig+0x244>)
 800176e:	69db      	ldr	r3, [r3, #28]
 8001770:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	699b      	ldr	r3, [r3, #24]
 8001778:	495e      	ldr	r1, [pc, #376]	; (80018f4 <HAL_RCC_ClockConfig+0x244>)
 800177a:	4313      	orrs	r3, r2
 800177c:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	681b      	ldr	r3, [r3, #0]
 8001782:	f003 0320 	and.w	r3, r3, #32
 8001786:	2b00      	cmp	r3, #0
 8001788:	d010      	beq.n	80017ac <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	69da      	ldr	r2, [r3, #28]
 800178e:	4b59      	ldr	r3, [pc, #356]	; (80018f4 <HAL_RCC_ClockConfig+0x244>)
 8001790:	6a1b      	ldr	r3, [r3, #32]
 8001792:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8001796:	429a      	cmp	r2, r3
 8001798:	d908      	bls.n	80017ac <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 800179a:	4b56      	ldr	r3, [pc, #344]	; (80018f4 <HAL_RCC_ClockConfig+0x244>)
 800179c:	6a1b      	ldr	r3, [r3, #32]
 800179e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	69db      	ldr	r3, [r3, #28]
 80017a6:	4953      	ldr	r1, [pc, #332]	; (80018f4 <HAL_RCC_ClockConfig+0x244>)
 80017a8:	4313      	orrs	r3, r2
 80017aa:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	681b      	ldr	r3, [r3, #0]
 80017b0:	f003 0302 	and.w	r3, r3, #2
 80017b4:	2b00      	cmp	r3, #0
 80017b6:	d010      	beq.n	80017da <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	68da      	ldr	r2, [r3, #12]
 80017bc:	4b4d      	ldr	r3, [pc, #308]	; (80018f4 <HAL_RCC_ClockConfig+0x244>)
 80017be:	699b      	ldr	r3, [r3, #24]
 80017c0:	f003 030f 	and.w	r3, r3, #15
 80017c4:	429a      	cmp	r2, r3
 80017c6:	d908      	bls.n	80017da <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80017c8:	4b4a      	ldr	r3, [pc, #296]	; (80018f4 <HAL_RCC_ClockConfig+0x244>)
 80017ca:	699b      	ldr	r3, [r3, #24]
 80017cc:	f023 020f 	bic.w	r2, r3, #15
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	68db      	ldr	r3, [r3, #12]
 80017d4:	4947      	ldr	r1, [pc, #284]	; (80018f4 <HAL_RCC_ClockConfig+0x244>)
 80017d6:	4313      	orrs	r3, r2
 80017d8:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	681b      	ldr	r3, [r3, #0]
 80017de:	f003 0301 	and.w	r3, r3, #1
 80017e2:	2b00      	cmp	r3, #0
 80017e4:	d055      	beq.n	8001892 <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 80017e6:	4b43      	ldr	r3, [pc, #268]	; (80018f4 <HAL_RCC_ClockConfig+0x244>)
 80017e8:	699b      	ldr	r3, [r3, #24]
 80017ea:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	689b      	ldr	r3, [r3, #8]
 80017f2:	4940      	ldr	r1, [pc, #256]	; (80018f4 <HAL_RCC_ClockConfig+0x244>)
 80017f4:	4313      	orrs	r3, r2
 80017f6:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	685b      	ldr	r3, [r3, #4]
 80017fc:	2b02      	cmp	r3, #2
 80017fe:	d107      	bne.n	8001810 <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001800:	4b3c      	ldr	r3, [pc, #240]	; (80018f4 <HAL_RCC_ClockConfig+0x244>)
 8001802:	681b      	ldr	r3, [r3, #0]
 8001804:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001808:	2b00      	cmp	r3, #0
 800180a:	d121      	bne.n	8001850 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 800180c:	2301      	movs	r3, #1
 800180e:	e0e7      	b.n	80019e0 <HAL_RCC_ClockConfig+0x330>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	685b      	ldr	r3, [r3, #4]
 8001814:	2b03      	cmp	r3, #3
 8001816:	d107      	bne.n	8001828 <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8001818:	4b36      	ldr	r3, [pc, #216]	; (80018f4 <HAL_RCC_ClockConfig+0x244>)
 800181a:	681b      	ldr	r3, [r3, #0]
 800181c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001820:	2b00      	cmp	r3, #0
 8001822:	d115      	bne.n	8001850 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8001824:	2301      	movs	r3, #1
 8001826:	e0db      	b.n	80019e0 <HAL_RCC_ClockConfig+0x330>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	685b      	ldr	r3, [r3, #4]
 800182c:	2b01      	cmp	r3, #1
 800182e:	d107      	bne.n	8001840 <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8001830:	4b30      	ldr	r3, [pc, #192]	; (80018f4 <HAL_RCC_ClockConfig+0x244>)
 8001832:	681b      	ldr	r3, [r3, #0]
 8001834:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001838:	2b00      	cmp	r3, #0
 800183a:	d109      	bne.n	8001850 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 800183c:	2301      	movs	r3, #1
 800183e:	e0cf      	b.n	80019e0 <HAL_RCC_ClockConfig+0x330>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001840:	4b2c      	ldr	r3, [pc, #176]	; (80018f4 <HAL_RCC_ClockConfig+0x244>)
 8001842:	681b      	ldr	r3, [r3, #0]
 8001844:	f003 0304 	and.w	r3, r3, #4
 8001848:	2b00      	cmp	r3, #0
 800184a:	d101      	bne.n	8001850 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 800184c:	2301      	movs	r3, #1
 800184e:	e0c7      	b.n	80019e0 <HAL_RCC_ClockConfig+0x330>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001850:	4b28      	ldr	r3, [pc, #160]	; (80018f4 <HAL_RCC_ClockConfig+0x244>)
 8001852:	691b      	ldr	r3, [r3, #16]
 8001854:	f023 0207 	bic.w	r2, r3, #7
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	685b      	ldr	r3, [r3, #4]
 800185c:	4925      	ldr	r1, [pc, #148]	; (80018f4 <HAL_RCC_ClockConfig+0x244>)
 800185e:	4313      	orrs	r3, r2
 8001860:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001862:	f7fe ffe5 	bl	8000830 <HAL_GetTick>
 8001866:	60f8      	str	r0, [r7, #12]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001868:	e00a      	b.n	8001880 <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800186a:	f7fe ffe1 	bl	8000830 <HAL_GetTick>
 800186e:	4602      	mov	r2, r0
 8001870:	68fb      	ldr	r3, [r7, #12]
 8001872:	1ad3      	subs	r3, r2, r3
 8001874:	f241 3288 	movw	r2, #5000	; 0x1388
 8001878:	4293      	cmp	r3, r2
 800187a:	d901      	bls.n	8001880 <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 800187c:	2303      	movs	r3, #3
 800187e:	e0af      	b.n	80019e0 <HAL_RCC_ClockConfig+0x330>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001880:	4b1c      	ldr	r3, [pc, #112]	; (80018f4 <HAL_RCC_ClockConfig+0x244>)
 8001882:	691b      	ldr	r3, [r3, #16]
 8001884:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	685b      	ldr	r3, [r3, #4]
 800188c:	00db      	lsls	r3, r3, #3
 800188e:	429a      	cmp	r2, r3
 8001890:	d1eb      	bne.n	800186a <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	681b      	ldr	r3, [r3, #0]
 8001896:	f003 0302 	and.w	r3, r3, #2
 800189a:	2b00      	cmp	r3, #0
 800189c:	d010      	beq.n	80018c0 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	68da      	ldr	r2, [r3, #12]
 80018a2:	4b14      	ldr	r3, [pc, #80]	; (80018f4 <HAL_RCC_ClockConfig+0x244>)
 80018a4:	699b      	ldr	r3, [r3, #24]
 80018a6:	f003 030f 	and.w	r3, r3, #15
 80018aa:	429a      	cmp	r2, r3
 80018ac:	d208      	bcs.n	80018c0 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80018ae:	4b11      	ldr	r3, [pc, #68]	; (80018f4 <HAL_RCC_ClockConfig+0x244>)
 80018b0:	699b      	ldr	r3, [r3, #24]
 80018b2:	f023 020f 	bic.w	r2, r3, #15
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	68db      	ldr	r3, [r3, #12]
 80018ba:	490e      	ldr	r1, [pc, #56]	; (80018f4 <HAL_RCC_ClockConfig+0x244>)
 80018bc:	4313      	orrs	r3, r2
 80018be:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80018c0:	4b0b      	ldr	r3, [pc, #44]	; (80018f0 <HAL_RCC_ClockConfig+0x240>)
 80018c2:	681b      	ldr	r3, [r3, #0]
 80018c4:	f003 030f 	and.w	r3, r3, #15
 80018c8:	683a      	ldr	r2, [r7, #0]
 80018ca:	429a      	cmp	r2, r3
 80018cc:	d214      	bcs.n	80018f8 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80018ce:	4b08      	ldr	r3, [pc, #32]	; (80018f0 <HAL_RCC_ClockConfig+0x240>)
 80018d0:	681b      	ldr	r3, [r3, #0]
 80018d2:	f023 020f 	bic.w	r2, r3, #15
 80018d6:	4906      	ldr	r1, [pc, #24]	; (80018f0 <HAL_RCC_ClockConfig+0x240>)
 80018d8:	683b      	ldr	r3, [r7, #0]
 80018da:	4313      	orrs	r3, r2
 80018dc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80018de:	4b04      	ldr	r3, [pc, #16]	; (80018f0 <HAL_RCC_ClockConfig+0x240>)
 80018e0:	681b      	ldr	r3, [r3, #0]
 80018e2:	f003 030f 	and.w	r3, r3, #15
 80018e6:	683a      	ldr	r2, [r7, #0]
 80018e8:	429a      	cmp	r2, r3
 80018ea:	d005      	beq.n	80018f8 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 80018ec:	2301      	movs	r3, #1
 80018ee:	e077      	b.n	80019e0 <HAL_RCC_ClockConfig+0x330>
 80018f0:	52002000 	.word	0x52002000
 80018f4:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	681b      	ldr	r3, [r3, #0]
 80018fc:	f003 0304 	and.w	r3, r3, #4
 8001900:	2b00      	cmp	r3, #0
 8001902:	d010      	beq.n	8001926 <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	691a      	ldr	r2, [r3, #16]
 8001908:	4b37      	ldr	r3, [pc, #220]	; (80019e8 <HAL_RCC_ClockConfig+0x338>)
 800190a:	699b      	ldr	r3, [r3, #24]
 800190c:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8001910:	429a      	cmp	r2, r3
 8001912:	d208      	bcs.n	8001926 <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8001914:	4b34      	ldr	r3, [pc, #208]	; (80019e8 <HAL_RCC_ClockConfig+0x338>)
 8001916:	699b      	ldr	r3, [r3, #24]
 8001918:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	691b      	ldr	r3, [r3, #16]
 8001920:	4931      	ldr	r1, [pc, #196]	; (80019e8 <HAL_RCC_ClockConfig+0x338>)
 8001922:	4313      	orrs	r3, r2
 8001924:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	681b      	ldr	r3, [r3, #0]
 800192a:	f003 0308 	and.w	r3, r3, #8
 800192e:	2b00      	cmp	r3, #0
 8001930:	d010      	beq.n	8001954 <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	695a      	ldr	r2, [r3, #20]
 8001936:	4b2c      	ldr	r3, [pc, #176]	; (80019e8 <HAL_RCC_ClockConfig+0x338>)
 8001938:	69db      	ldr	r3, [r3, #28]
 800193a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800193e:	429a      	cmp	r2, r3
 8001940:	d208      	bcs.n	8001954 <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8001942:	4b29      	ldr	r3, [pc, #164]	; (80019e8 <HAL_RCC_ClockConfig+0x338>)
 8001944:	69db      	ldr	r3, [r3, #28]
 8001946:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	695b      	ldr	r3, [r3, #20]
 800194e:	4926      	ldr	r1, [pc, #152]	; (80019e8 <HAL_RCC_ClockConfig+0x338>)
 8001950:	4313      	orrs	r3, r2
 8001952:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	681b      	ldr	r3, [r3, #0]
 8001958:	f003 0310 	and.w	r3, r3, #16
 800195c:	2b00      	cmp	r3, #0
 800195e:	d010      	beq.n	8001982 <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	699a      	ldr	r2, [r3, #24]
 8001964:	4b20      	ldr	r3, [pc, #128]	; (80019e8 <HAL_RCC_ClockConfig+0x338>)
 8001966:	69db      	ldr	r3, [r3, #28]
 8001968:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800196c:	429a      	cmp	r2, r3
 800196e:	d208      	bcs.n	8001982 <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8001970:	4b1d      	ldr	r3, [pc, #116]	; (80019e8 <HAL_RCC_ClockConfig+0x338>)
 8001972:	69db      	ldr	r3, [r3, #28]
 8001974:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	699b      	ldr	r3, [r3, #24]
 800197c:	491a      	ldr	r1, [pc, #104]	; (80019e8 <HAL_RCC_ClockConfig+0x338>)
 800197e:	4313      	orrs	r3, r2
 8001980:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	681b      	ldr	r3, [r3, #0]
 8001986:	f003 0320 	and.w	r3, r3, #32
 800198a:	2b00      	cmp	r3, #0
 800198c:	d010      	beq.n	80019b0 <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	69da      	ldr	r2, [r3, #28]
 8001992:	4b15      	ldr	r3, [pc, #84]	; (80019e8 <HAL_RCC_ClockConfig+0x338>)
 8001994:	6a1b      	ldr	r3, [r3, #32]
 8001996:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800199a:	429a      	cmp	r2, r3
 800199c:	d208      	bcs.n	80019b0 <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 800199e:	4b12      	ldr	r3, [pc, #72]	; (80019e8 <HAL_RCC_ClockConfig+0x338>)
 80019a0:	6a1b      	ldr	r3, [r3, #32]
 80019a2:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	69db      	ldr	r3, [r3, #28]
 80019aa:	490f      	ldr	r1, [pc, #60]	; (80019e8 <HAL_RCC_ClockConfig+0x338>)
 80019ac:	4313      	orrs	r3, r2
 80019ae:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80019b0:	f000 f822 	bl	80019f8 <HAL_RCC_GetSysClockFreq>
 80019b4:	4602      	mov	r2, r0
 80019b6:	4b0c      	ldr	r3, [pc, #48]	; (80019e8 <HAL_RCC_ClockConfig+0x338>)
 80019b8:	699b      	ldr	r3, [r3, #24]
 80019ba:	0a1b      	lsrs	r3, r3, #8
 80019bc:	f003 030f 	and.w	r3, r3, #15
 80019c0:	490a      	ldr	r1, [pc, #40]	; (80019ec <HAL_RCC_ClockConfig+0x33c>)
 80019c2:	5ccb      	ldrb	r3, [r1, r3]
 80019c4:	f003 031f 	and.w	r3, r3, #31
 80019c8:	fa22 f303 	lsr.w	r3, r2, r3
 80019cc:	4a08      	ldr	r2, [pc, #32]	; (80019f0 <HAL_RCC_ClockConfig+0x340>)
 80019ce:	6013      	str	r3, [r2, #0]
#else
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif
  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 80019d0:	4b08      	ldr	r3, [pc, #32]	; (80019f4 <HAL_RCC_ClockConfig+0x344>)
 80019d2:	681b      	ldr	r3, [r3, #0]
 80019d4:	4618      	mov	r0, r3
 80019d6:	f7fe fee1 	bl	800079c <HAL_InitTick>
 80019da:	4603      	mov	r3, r0
 80019dc:	72fb      	strb	r3, [r7, #11]

  return halstatus;
 80019de:	7afb      	ldrb	r3, [r7, #11]
}
 80019e0:	4618      	mov	r0, r3
 80019e2:	3710      	adds	r7, #16
 80019e4:	46bd      	mov	sp, r7
 80019e6:	bd80      	pop	{r7, pc}
 80019e8:	58024400 	.word	0x58024400
 80019ec:	08001d4c 	.word	0x08001d4c
 80019f0:	24000000 	.word	0x24000000
 80019f4:	24000008 	.word	0x24000008

080019f8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80019f8:	b480      	push	{r7}
 80019fa:	b089      	sub	sp, #36	; 0x24
 80019fc:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 80019fe:	4bb3      	ldr	r3, [pc, #716]	; (8001ccc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001a00:	691b      	ldr	r3, [r3, #16]
 8001a02:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8001a06:	2b18      	cmp	r3, #24
 8001a08:	f200 8155 	bhi.w	8001cb6 <HAL_RCC_GetSysClockFreq+0x2be>
 8001a0c:	a201      	add	r2, pc, #4	; (adr r2, 8001a14 <HAL_RCC_GetSysClockFreq+0x1c>)
 8001a0e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001a12:	bf00      	nop
 8001a14:	08001a79 	.word	0x08001a79
 8001a18:	08001cb7 	.word	0x08001cb7
 8001a1c:	08001cb7 	.word	0x08001cb7
 8001a20:	08001cb7 	.word	0x08001cb7
 8001a24:	08001cb7 	.word	0x08001cb7
 8001a28:	08001cb7 	.word	0x08001cb7
 8001a2c:	08001cb7 	.word	0x08001cb7
 8001a30:	08001cb7 	.word	0x08001cb7
 8001a34:	08001a9f 	.word	0x08001a9f
 8001a38:	08001cb7 	.word	0x08001cb7
 8001a3c:	08001cb7 	.word	0x08001cb7
 8001a40:	08001cb7 	.word	0x08001cb7
 8001a44:	08001cb7 	.word	0x08001cb7
 8001a48:	08001cb7 	.word	0x08001cb7
 8001a4c:	08001cb7 	.word	0x08001cb7
 8001a50:	08001cb7 	.word	0x08001cb7
 8001a54:	08001aa5 	.word	0x08001aa5
 8001a58:	08001cb7 	.word	0x08001cb7
 8001a5c:	08001cb7 	.word	0x08001cb7
 8001a60:	08001cb7 	.word	0x08001cb7
 8001a64:	08001cb7 	.word	0x08001cb7
 8001a68:	08001cb7 	.word	0x08001cb7
 8001a6c:	08001cb7 	.word	0x08001cb7
 8001a70:	08001cb7 	.word	0x08001cb7
 8001a74:	08001aab 	.word	0x08001aab
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8001a78:	4b94      	ldr	r3, [pc, #592]	; (8001ccc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001a7a:	681b      	ldr	r3, [r3, #0]
 8001a7c:	f003 0320 	and.w	r3, r3, #32
 8001a80:	2b00      	cmp	r3, #0
 8001a82:	d009      	beq.n	8001a98 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8001a84:	4b91      	ldr	r3, [pc, #580]	; (8001ccc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001a86:	681b      	ldr	r3, [r3, #0]
 8001a88:	08db      	lsrs	r3, r3, #3
 8001a8a:	f003 0303 	and.w	r3, r3, #3
 8001a8e:	4a90      	ldr	r2, [pc, #576]	; (8001cd0 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8001a90:	fa22 f303 	lsr.w	r3, r2, r3
 8001a94:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 8001a96:	e111      	b.n	8001cbc <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8001a98:	4b8d      	ldr	r3, [pc, #564]	; (8001cd0 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8001a9a:	61bb      	str	r3, [r7, #24]
    break;
 8001a9c:	e10e      	b.n	8001cbc <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 8001a9e:	4b8d      	ldr	r3, [pc, #564]	; (8001cd4 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8001aa0:	61bb      	str	r3, [r7, #24]
    break;
 8001aa2:	e10b      	b.n	8001cbc <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 8001aa4:	4b8c      	ldr	r3, [pc, #560]	; (8001cd8 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8001aa6:	61bb      	str	r3, [r7, #24]
    break;
 8001aa8:	e108      	b.n	8001cbc <HAL_RCC_GetSysClockFreq+0x2c4>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8001aaa:	4b88      	ldr	r3, [pc, #544]	; (8001ccc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001aac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001aae:	f003 0303 	and.w	r3, r3, #3
 8001ab2:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 8001ab4:	4b85      	ldr	r3, [pc, #532]	; (8001ccc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001ab6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ab8:	091b      	lsrs	r3, r3, #4
 8001aba:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001abe:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 8001ac0:	4b82      	ldr	r3, [pc, #520]	; (8001ccc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001ac2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ac4:	f003 0301 	and.w	r3, r3, #1
 8001ac8:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8001aca:	4b80      	ldr	r3, [pc, #512]	; (8001ccc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001acc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001ace:	08db      	lsrs	r3, r3, #3
 8001ad0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8001ad4:	68fa      	ldr	r2, [r7, #12]
 8001ad6:	fb02 f303 	mul.w	r3, r2, r3
 8001ada:	ee07 3a90 	vmov	s15, r3
 8001ade:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001ae2:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 8001ae6:	693b      	ldr	r3, [r7, #16]
 8001ae8:	2b00      	cmp	r3, #0
 8001aea:	f000 80e1 	beq.w	8001cb0 <HAL_RCC_GetSysClockFreq+0x2b8>
 8001aee:	697b      	ldr	r3, [r7, #20]
 8001af0:	2b02      	cmp	r3, #2
 8001af2:	f000 8083 	beq.w	8001bfc <HAL_RCC_GetSysClockFreq+0x204>
 8001af6:	697b      	ldr	r3, [r7, #20]
 8001af8:	2b02      	cmp	r3, #2
 8001afa:	f200 80a1 	bhi.w	8001c40 <HAL_RCC_GetSysClockFreq+0x248>
 8001afe:	697b      	ldr	r3, [r7, #20]
 8001b00:	2b00      	cmp	r3, #0
 8001b02:	d003      	beq.n	8001b0c <HAL_RCC_GetSysClockFreq+0x114>
 8001b04:	697b      	ldr	r3, [r7, #20]
 8001b06:	2b01      	cmp	r3, #1
 8001b08:	d056      	beq.n	8001bb8 <HAL_RCC_GetSysClockFreq+0x1c0>
 8001b0a:	e099      	b.n	8001c40 <HAL_RCC_GetSysClockFreq+0x248>
    {
      switch (pllsource)
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8001b0c:	4b6f      	ldr	r3, [pc, #444]	; (8001ccc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001b0e:	681b      	ldr	r3, [r3, #0]
 8001b10:	f003 0320 	and.w	r3, r3, #32
 8001b14:	2b00      	cmp	r3, #0
 8001b16:	d02d      	beq.n	8001b74 <HAL_RCC_GetSysClockFreq+0x17c>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8001b18:	4b6c      	ldr	r3, [pc, #432]	; (8001ccc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	08db      	lsrs	r3, r3, #3
 8001b1e:	f003 0303 	and.w	r3, r3, #3
 8001b22:	4a6b      	ldr	r2, [pc, #428]	; (8001cd0 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8001b24:	fa22 f303 	lsr.w	r3, r2, r3
 8001b28:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	ee07 3a90 	vmov	s15, r3
 8001b30:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8001b34:	693b      	ldr	r3, [r7, #16]
 8001b36:	ee07 3a90 	vmov	s15, r3
 8001b3a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001b3e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8001b42:	4b62      	ldr	r3, [pc, #392]	; (8001ccc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001b44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b46:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001b4a:	ee07 3a90 	vmov	s15, r3
 8001b4e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8001b52:	ed97 6a02 	vldr	s12, [r7, #8]
 8001b56:	eddf 5a61 	vldr	s11, [pc, #388]	; 8001cdc <HAL_RCC_GetSysClockFreq+0x2e4>
 8001b5a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8001b5e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8001b62:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8001b66:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8001b6a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001b6e:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 8001b72:	e087      	b.n	8001c84 <HAL_RCC_GetSysClockFreq+0x28c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8001b74:	693b      	ldr	r3, [r7, #16]
 8001b76:	ee07 3a90 	vmov	s15, r3
 8001b7a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001b7e:	eddf 6a58 	vldr	s13, [pc, #352]	; 8001ce0 <HAL_RCC_GetSysClockFreq+0x2e8>
 8001b82:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8001b86:	4b51      	ldr	r3, [pc, #324]	; (8001ccc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001b88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b8a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001b8e:	ee07 3a90 	vmov	s15, r3
 8001b92:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8001b96:	ed97 6a02 	vldr	s12, [r7, #8]
 8001b9a:	eddf 5a50 	vldr	s11, [pc, #320]	; 8001cdc <HAL_RCC_GetSysClockFreq+0x2e4>
 8001b9e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8001ba2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8001ba6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8001baa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8001bae:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001bb2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8001bb6:	e065      	b.n	8001c84 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8001bb8:	693b      	ldr	r3, [r7, #16]
 8001bba:	ee07 3a90 	vmov	s15, r3
 8001bbe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001bc2:	eddf 6a48 	vldr	s13, [pc, #288]	; 8001ce4 <HAL_RCC_GetSysClockFreq+0x2ec>
 8001bc6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8001bca:	4b40      	ldr	r3, [pc, #256]	; (8001ccc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001bcc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bce:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001bd2:	ee07 3a90 	vmov	s15, r3
 8001bd6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8001bda:	ed97 6a02 	vldr	s12, [r7, #8]
 8001bde:	eddf 5a3f 	vldr	s11, [pc, #252]	; 8001cdc <HAL_RCC_GetSysClockFreq+0x2e4>
 8001be2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8001be6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8001bea:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8001bee:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8001bf2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001bf6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8001bfa:	e043      	b.n	8001c84 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8001bfc:	693b      	ldr	r3, [r7, #16]
 8001bfe:	ee07 3a90 	vmov	s15, r3
 8001c02:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001c06:	eddf 6a38 	vldr	s13, [pc, #224]	; 8001ce8 <HAL_RCC_GetSysClockFreq+0x2f0>
 8001c0a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8001c0e:	4b2f      	ldr	r3, [pc, #188]	; (8001ccc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001c10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c12:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001c16:	ee07 3a90 	vmov	s15, r3
 8001c1a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8001c1e:	ed97 6a02 	vldr	s12, [r7, #8]
 8001c22:	eddf 5a2e 	vldr	s11, [pc, #184]	; 8001cdc <HAL_RCC_GetSysClockFreq+0x2e4>
 8001c26:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8001c2a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8001c2e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8001c32:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8001c36:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001c3a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8001c3e:	e021      	b.n	8001c84 <HAL_RCC_GetSysClockFreq+0x28c>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8001c40:	693b      	ldr	r3, [r7, #16]
 8001c42:	ee07 3a90 	vmov	s15, r3
 8001c46:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001c4a:	eddf 6a26 	vldr	s13, [pc, #152]	; 8001ce4 <HAL_RCC_GetSysClockFreq+0x2ec>
 8001c4e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8001c52:	4b1e      	ldr	r3, [pc, #120]	; (8001ccc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001c54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c56:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001c5a:	ee07 3a90 	vmov	s15, r3
 8001c5e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8001c62:	ed97 6a02 	vldr	s12, [r7, #8]
 8001c66:	eddf 5a1d 	vldr	s11, [pc, #116]	; 8001cdc <HAL_RCC_GetSysClockFreq+0x2e4>
 8001c6a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8001c6e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8001c72:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8001c76:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8001c7a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001c7e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8001c82:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 8001c84:	4b11      	ldr	r3, [pc, #68]	; (8001ccc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001c86:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c88:	0a5b      	lsrs	r3, r3, #9
 8001c8a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001c8e:	3301      	adds	r3, #1
 8001c90:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 8001c92:	683b      	ldr	r3, [r7, #0]
 8001c94:	ee07 3a90 	vmov	s15, r3
 8001c98:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001c9c:	edd7 6a07 	vldr	s13, [r7, #28]
 8001ca0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001ca4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001ca8:	ee17 3a90 	vmov	r3, s15
 8001cac:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 8001cae:	e005      	b.n	8001cbc <HAL_RCC_GetSysClockFreq+0x2c4>
      sysclockfreq = 0U;
 8001cb0:	2300      	movs	r3, #0
 8001cb2:	61bb      	str	r3, [r7, #24]
    break;
 8001cb4:	e002      	b.n	8001cbc <HAL_RCC_GetSysClockFreq+0x2c4>

  default:
    sysclockfreq = CSI_VALUE;
 8001cb6:	4b07      	ldr	r3, [pc, #28]	; (8001cd4 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8001cb8:	61bb      	str	r3, [r7, #24]
    break;
 8001cba:	bf00      	nop
  }

  return sysclockfreq;
 8001cbc:	69bb      	ldr	r3, [r7, #24]
}
 8001cbe:	4618      	mov	r0, r3
 8001cc0:	3724      	adds	r7, #36	; 0x24
 8001cc2:	46bd      	mov	sp, r7
 8001cc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cc8:	4770      	bx	lr
 8001cca:	bf00      	nop
 8001ccc:	58024400 	.word	0x58024400
 8001cd0:	03d09000 	.word	0x03d09000
 8001cd4:	003d0900 	.word	0x003d0900
 8001cd8:	007a1200 	.word	0x007a1200
 8001cdc:	46000000 	.word	0x46000000
 8001ce0:	4c742400 	.word	0x4c742400
 8001ce4:	4a742400 	.word	0x4a742400
 8001ce8:	4af42400 	.word	0x4af42400

08001cec <__libc_init_array>:
 8001cec:	b570      	push	{r4, r5, r6, lr}
 8001cee:	4d0d      	ldr	r5, [pc, #52]	; (8001d24 <__libc_init_array+0x38>)
 8001cf0:	4c0d      	ldr	r4, [pc, #52]	; (8001d28 <__libc_init_array+0x3c>)
 8001cf2:	1b64      	subs	r4, r4, r5
 8001cf4:	10a4      	asrs	r4, r4, #2
 8001cf6:	2600      	movs	r6, #0
 8001cf8:	42a6      	cmp	r6, r4
 8001cfa:	d109      	bne.n	8001d10 <__libc_init_array+0x24>
 8001cfc:	4d0b      	ldr	r5, [pc, #44]	; (8001d2c <__libc_init_array+0x40>)
 8001cfe:	4c0c      	ldr	r4, [pc, #48]	; (8001d30 <__libc_init_array+0x44>)
 8001d00:	f000 f818 	bl	8001d34 <_init>
 8001d04:	1b64      	subs	r4, r4, r5
 8001d06:	10a4      	asrs	r4, r4, #2
 8001d08:	2600      	movs	r6, #0
 8001d0a:	42a6      	cmp	r6, r4
 8001d0c:	d105      	bne.n	8001d1a <__libc_init_array+0x2e>
 8001d0e:	bd70      	pop	{r4, r5, r6, pc}
 8001d10:	f855 3b04 	ldr.w	r3, [r5], #4
 8001d14:	4798      	blx	r3
 8001d16:	3601      	adds	r6, #1
 8001d18:	e7ee      	b.n	8001cf8 <__libc_init_array+0xc>
 8001d1a:	f855 3b04 	ldr.w	r3, [r5], #4
 8001d1e:	4798      	blx	r3
 8001d20:	3601      	adds	r6, #1
 8001d22:	e7f2      	b.n	8001d0a <__libc_init_array+0x1e>
 8001d24:	08001d5c 	.word	0x08001d5c
 8001d28:	08001d5c 	.word	0x08001d5c
 8001d2c:	08001d5c 	.word	0x08001d5c
 8001d30:	08001d60 	.word	0x08001d60

08001d34 <_init>:
 8001d34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001d36:	bf00      	nop
 8001d38:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001d3a:	bc08      	pop	{r3}
 8001d3c:	469e      	mov	lr, r3
 8001d3e:	4770      	bx	lr

08001d40 <_fini>:
 8001d40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001d42:	bf00      	nop
 8001d44:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001d46:	bc08      	pop	{r3}
 8001d48:	469e      	mov	lr, r3
 8001d4a:	4770      	bx	lr
